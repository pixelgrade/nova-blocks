/*! For license information please see jquery.velocity.min.js.LICENSE */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./dist/js/vendor/jquery.velocity.js")}({"./dist/js/vendor/jquery.velocity.js":function(module,exports,__webpack_require__){eval('/**\n * velocity-animate (C) 2014-2017 Julian Shapiro.\n *\n * http://velocityjs.org/\n *\n * Licensed under the MIT license. See LICENSE file in the project root for details.\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t\tundefined;\n}(this, (function () { \'use strict\';\n\n\tvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {\n\t\treturn typeof obj;\n\t} : function (obj) {\n\t\treturn obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n\t};\n\n\tvar classCallCheck = function (instance, Constructor) {\n\t\tif (!(instance instanceof Constructor)) {\n\t\t\tthrow new TypeError("Cannot call a class as a function");\n\t\t}\n\t};\n\n\tvar createClass = function () {\n\t\tfunction defineProperties(target, props) {\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\tvar descriptor = props[i];\n\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\tdescriptor.configurable = true;\n\t\t\t\tif ("value" in descriptor) descriptor.writable = true;\n\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\treturn Constructor;\n\t\t};\n\t}();\n\n\tvar defineProperty = function (obj, key, value) {\n\t\tif (key in obj) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tvalue: value,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t} else {\n\t\t\tobj[key] = value;\n\t\t}\n\n\t\treturn obj;\n\t};\n\n\t/**\n\t * Check if a variable is a boolean.\n\t */\n\tfunction isBoolean(variable) {\n\t\treturn variable === true || variable === false;\n\t}\n\t/**\n\t * Check if a variable is a function.\n\t */\n\tfunction isFunction(variable) {\n\t\treturn Object.prototype.toString.call(variable) === "[object Function]";\n\t}\n\t/**\n\t * Check if a variable is an HTMLElement or SVGElement.\n\t */\n\tfunction isNode(variable) {\n\t\treturn !!(variable && variable.nodeType);\n\t}\n\t/**\n\t * Check if a variable is a number.\n\t */\n\tfunction isNumber(variable) {\n\t\treturn typeof variable === "number";\n\t}\n\t/**\n\t * Check if a variable is a plain object (and not an instance).\n\t */\n\tfunction isPlainObject(variable) {\n\t\tif (!variable || (typeof variable === "undefined" ? "undefined" : _typeof(variable)) !== "object" || variable.nodeType || Object.prototype.toString.call(variable) !== "[object Object]") {\n\t\t\treturn false;\n\t\t}\n\t\tvar proto = Object.getPrototypeOf(variable);\n\t\treturn !proto || proto.hasOwnProperty("constructor") && proto.constructor === Object;\n\t}\n\t/**\n\t * Check if a variable is a string.\n\t */\n\tfunction isString(variable) {\n\t\treturn typeof variable === "string";\n\t}\n\t/**\n\t * Check if a variable is the result of calling Velocity.\n\t */\n\tfunction isVelocityResult(variable) {\n\t\treturn variable && isNumber(variable.length) && isFunction(variable.velocity);\n\t}\n\t/**\n\t * Check if a variable is an array-like wrapped jQuery, Zepto or similar, where\n\t * each indexed value is a Node.\n\t */\n\tfunction isWrapped(variable) {\n\t\treturn variable && variable !== window && isNumber(variable.length) && !isString(variable) && !isFunction(variable) && !isNode(variable) && (variable.length === 0 || isNode(variable[0]));\n\t}\n\t/**\n\t * Check is a property is an enumerable member of an object.\n\t */\n\tfunction propertyIsEnumerable(obj, property) {\n\t\treturn Object.prototype.propertyIsEnumerable.call(obj, property);\n\t}\n\n\t// Project\n\t/**\n\t * Add a single className to an Element.\n\t */\n\tfunction addClass(element, className) {\n\t\tif (element instanceof Element) {\n\t\t\tif (element.classList) {\n\t\t\t\telement.classList.add(className);\n\t\t\t} else {\n\t\t\t\tremoveClass(element, className);\n\t\t\t\telement.className += (element.className.length ? " " : "") + className;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Clone an array, works for array-like too.\n\t */\n\tfunction cloneArray(arrayLike) {\n\t\treturn Array.prototype.slice.call(arrayLike, 0);\n\t}\n\t/**\n\t * The <strong><code>defineProperty()</code></strong> function provides a\n\t * shortcut to defining a property that cannot be accidentally iterated across.\n\t */\n\tfunction defineProperty$1(proto, name, value, readonly) {\n\t\tif (proto) {\n\t\t\tObject.defineProperty(proto, name, {\n\t\t\t\tconfigurable: !readonly,\n\t\t\t\twritable: !readonly,\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t}\n\t}\n\t/**\n\t * When there are multiple locations for a value pass them all in, then get the\n\t * first value that is valid.\n\t */\n\tfunction getValue() {\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = arguments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar arg = _step.value;\n\n\t\t\t\tif (arg !== undefined && arg === arg) {\n\t\t\t\t\treturn arg;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Shim to get the current milliseconds - on anything except old IE it\'ll use\n\t * Date.now() and save creating an object. If that doesn\'t exist then it\'ll\n\t * create one that gets GC.\n\t */\n\tvar now = Date.now ? Date.now : function () {\n\t\treturn new Date().getTime();\n\t};\n\t/**\n\t * Remove a single className from an Element.\n\t */\n\tfunction removeClass(element, className) {\n\t\tif (element instanceof Element) {\n\t\t\tif (element.classList) {\n\t\t\t\telement.classList.remove(className);\n\t\t\t} else {\n\t\t\t\t// TODO: Need some jsperf tests on performance - can we get rid of the regex and maybe use split / array manipulation?\n\t\t\t\telement.className = element.className.replace(new RegExp("(^|\\\\s)" + className + "(\\\\s|$)", "gi"), " ");\n\t\t\t}\n\t\t}\n\t}\n\n\t// Project\n\t// Constants\n\tvar Actions = {};\n\t/**\n\t * Used to register an action. This should never be called by users\n\t * directly, instead it should be called via  an action:<br/>\n\t * <code>Velocity("registerAction", "name", VelocityActionFn);</code>\n\t */\n\tfunction registerAction(args, internal) {\n\t\tvar name = args[0],\n\t\t\tcallback = args[1];\n\t\tif (!isString(name)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerAction\' name to an invalid value:", name);\n\t\t} else if (!isFunction(callback)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerAction\' callback to an invalid value:", name, callback);\n\t\t} else if (Actions[name] && !propertyIsEnumerable(Actions, name)) {\n\t\t\tconsole.warn("VelocityJS: Trying to override internal \'registerAction\' callback", name);\n\t\t} else if (internal === true) {\n\t\t\tdefineProperty$1(Actions, name, callback);\n\t\t} else {\n\t\t\tActions[name] = callback;\n\t\t}\n\t}\n\tregisterAction(["registerAction", registerAction], true);\n\n\t/**\n\t * Without this it will only un-prefix properties that have a valid "normal"\n\t * version.\n\t */\n\tvar DURATION_FAST = 200;\n\tvar DURATION_NORMAL = 400;\n\tvar DURATION_SLOW = 600;\n\tvar FUZZY_MS_PER_SECOND = 980;\n\tvar DEFAULT_CACHE = true;\n\tvar DEFAULT_DELAY = 0;\n\tvar DEFAULT_DURATION = DURATION_NORMAL;\n\tvar DEFAULT_EASING = "swing";\n\tvar DEFAULT_FPSLIMIT = 60;\n\tvar DEFAULT_LOOP = 0;\n\tvar DEFAULT_PROMISE = true;\n\tvar DEFAULT_PROMISE_REJECT_EMPTY = true;\n\tvar DEFAULT_QUEUE = "";\n\tvar DEFAULT_REPEAT = 0;\n\tvar DEFAULT_SPEED = 1;\n\tvar DEFAULT_SYNC = true;\n\tvar CLASSNAME = "velocity-animating";\n\tvar Duration = {\n\t\tfast: DURATION_FAST,\n\t\tnormal: DURATION_NORMAL,\n\t\tslow: DURATION_SLOW\n\t};\n\n\t// Project\n\t// Constants\n\tvar Easings = {};\n\t/**\n\t * Used to register a easing. This should never be called by users\n\t * directly, instead it should be called via an action:<br/>\n\t * <code>Velocity("registerEasing", "name", VelocityEasingFn);</code>\n\t */\n\tfunction registerEasing(args) {\n\t\tvar name = args[0],\n\t\t\tcallback = args[1];\n\t\tif (!isString(name)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerEasing\' name to an invalid value:", name);\n\t\t} else if (!isFunction(callback)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerEasing\' callback to an invalid value:", name, callback);\n\t\t} else if (Easings[name]) {\n\t\t\tconsole.warn("VelocityJS: Trying to override \'registerEasing\' callback", name);\n\t\t} else {\n\t\t\tEasings[name] = callback;\n\t\t}\n\t}\n\tregisterAction(["registerEasing", registerEasing], true);\n\t/**\n\t * Linear easing, used for sequence parts that don\'t have an actual easing\n\t * function.\n\t */\n\tfunction linearEasing(percentComplete, startValue, endValue, property) {\n\t\treturn startValue + percentComplete * (endValue - startValue);\n\t}\n\t/**\n\t * Swing is the default for jQuery and Velocity.\n\t */\n\tfunction swingEasing(percentComplete, startValue, endValue) {\n\t\treturn startValue + (0.5 - Math.cos(percentComplete * Math.PI) / 2) * (endValue - startValue);\n\t}\n\t/**\n\t * A less exaggerated version of easeInOutElastic.\n\t */\n\tfunction springEasing(percentComplete, startValue, endValue) {\n\t\treturn startValue + (1 - Math.cos(percentComplete * 4.5 * Math.PI) * Math.exp(-percentComplete * 6)) * (endValue - startValue);\n\t}\n\tregisterEasing(["linear", linearEasing]);\n\tregisterEasing(["swing", swingEasing]);\n\tregisterEasing(["spring", springEasing]);\n\n\t// Project\n\t/**\n\t * Fix to a range of <code>0 <= num <= 1</code>.\n\t */\n\tfunction fixRange(num) {\n\t\treturn Math.min(Math.max(num, 0), 1);\n\t}\n\tfunction A(aA1, aA2) {\n\t\treturn 1 - 3 * aA2 + 3 * aA1;\n\t}\n\tfunction B(aA1, aA2) {\n\t\treturn 3 * aA2 - 6 * aA1;\n\t}\n\tfunction C(aA1) {\n\t\treturn 3 * aA1;\n\t}\n\tfunction calcBezier(aT, aA1, aA2) {\n\t\treturn ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n\t}\n\tfunction getSlope(aT, aA1, aA2) {\n\t\treturn 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);\n\t}\n\tfunction generateBezier(mX1, mY1, mX2, mY2) {\n\t\tvar NEWTON_ITERATIONS = 4,\n\t\t\tNEWTON_MIN_SLOPE = 0.001,\n\t\t\tSUBDIVISION_PRECISION = 0.0000001,\n\t\t\tSUBDIVISION_MAX_ITERATIONS = 10,\n\t\t\tkSplineTableSize = 11,\n\t\t\tkSampleStepSize = 1 / (kSplineTableSize - 1),\n\t\t\tfloat32ArraySupported = "Float32Array" in window;\n\t\t/* Must contain four arguments. */\n\t\tif (arguments.length !== 4) {\n\t\t\treturn;\n\t\t}\n\t\t/* Arguments must be numbers. */\n\t\tfor (var i = 0; i < 4; ++i) {\n\t\t\tif (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t/* X values must be in the [0, 1] range. */\n\t\tmX1 = fixRange(mX1);\n\t\tmX2 = fixRange(mX2);\n\t\tvar mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\t\tfunction newtonRaphsonIterate(aX, aGuessT) {\n\t\t\tfor (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {\n\t\t\t\tvar currentSlope = getSlope(aGuessT, mX1, mX2);\n\t\t\t\tif (currentSlope === 0) {\n\t\t\t\t\treturn aGuessT;\n\t\t\t\t}\n\t\t\t\tvar currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n\t\t\t\taGuessT -= currentX / currentSlope;\n\t\t\t}\n\t\t\treturn aGuessT;\n\t\t}\n\t\tfunction calcSampleValues() {\n\t\t\tfor (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {\n\t\t\t\tmSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);\n\t\t\t}\n\t\t}\n\t\tfunction binarySubdivide(aX, aA, aB) {\n\t\t\tvar currentX = void 0,\n\t\t\t\tcurrentT = void 0,\n\t\t\t\ti = 0;\n\t\t\tdo {\n\t\t\t\tcurrentT = aA + (aB - aA) / 2;\n\t\t\t\tcurrentX = calcBezier(currentT, mX1, mX2) - aX;\n\t\t\t\tif (currentX > 0) {\n\t\t\t\t\taB = currentT;\n\t\t\t\t} else {\n\t\t\t\t\taA = currentT;\n\t\t\t\t}\n\t\t\t} while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\t\t\treturn currentT;\n\t\t}\n\t\tfunction getTForX(aX) {\n\t\t\tvar lastSample = kSplineTableSize - 1;\n\t\t\tvar intervalStart = 0,\n\t\t\t\tcurrentSample = 1;\n\t\t\tfor (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {\n\t\t\t\tintervalStart += kSampleStepSize;\n\t\t\t}\n\t\t\t--currentSample;\n\t\t\tvar dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),\n\t\t\t\tguessForT = intervalStart + dist * kSampleStepSize,\n\t\t\t\tinitialSlope = getSlope(guessForT, mX1, mX2);\n\t\t\tif (initialSlope >= NEWTON_MIN_SLOPE) {\n\t\t\t\treturn newtonRaphsonIterate(aX, guessForT);\n\t\t\t} else if (initialSlope === 0) {\n\t\t\t\treturn guessForT;\n\t\t\t} else {\n\t\t\t\treturn binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n\t\t\t}\n\t\t}\n\t\tvar precomputed = false;\n\t\tfunction precompute() {\n\t\t\tprecomputed = true;\n\t\t\tif (mX1 !== mY1 || mX2 !== mY2) {\n\t\t\t\tcalcSampleValues();\n\t\t\t}\n\t\t}\n\t\tvar str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")",\n\t\t\tf = function f(percentComplete, startValue, endValue, property) {\n\t\t\t\tif (!precomputed) {\n\t\t\t\t\tprecompute();\n\t\t\t\t}\n\t\t\t\tif (percentComplete === 0) {\n\t\t\t\t\treturn startValue;\n\t\t\t\t}\n\t\t\t\tif (percentComplete === 1) {\n\t\t\t\t\treturn endValue;\n\t\t\t\t}\n\t\t\t\tif (mX1 === mY1 && mX2 === mY2) {\n\t\t\t\t\treturn startValue + percentComplete * (endValue - startValue);\n\t\t\t\t}\n\t\t\t\treturn startValue + calcBezier(getTForX(percentComplete), mY1, mY2) * (endValue - startValue);\n\t\t\t};\n\t\tf.getControlPoints = function () {\n\t\t\treturn [{ x: mX1, y: mY1 }, { x: mX2, y: mY2 }];\n\t\t};\n\t\tf.toString = function () {\n\t\t\treturn str;\n\t\t};\n\t\treturn f;\n\t}\n\t/* Common easings */\n\tvar easeIn = generateBezier(0.42, 0, 1, 1),\n\t\teaseOut = generateBezier(0, 0, 0.58, 1),\n\t\teaseInOut = generateBezier(0.42, 0, 0.58, 1);\n\tregisterEasing(["ease", generateBezier(0.25, 0.1, 0.25, 1)]);\n\tregisterEasing(["easeIn", easeIn]);\n\tregisterEasing(["ease-in", easeIn]);\n\tregisterEasing(["easeOut", easeOut]);\n\tregisterEasing(["ease-out", easeOut]);\n\tregisterEasing(["easeInOut", easeInOut]);\n\tregisterEasing(["ease-in-out", easeInOut]);\n\tregisterEasing(["easeInSine", generateBezier(0.47, 0, 0.745, 0.715)]);\n\tregisterEasing(["easeOutSine", generateBezier(0.39, 0.575, 0.565, 1)]);\n\tregisterEasing(["easeInOutSine", generateBezier(0.445, 0.05, 0.55, 0.95)]);\n\tregisterEasing(["easeInQuad", generateBezier(0.55, 0.085, 0.68, 0.53)]);\n\tregisterEasing(["easeOutQuad", generateBezier(0.25, 0.46, 0.45, 0.94)]);\n\tregisterEasing(["easeInOutQuad", generateBezier(0.455, 0.03, 0.515, 0.955)]);\n\tregisterEasing(["easeInCubic", generateBezier(0.55, 0.055, 0.675, 0.19)]);\n\tregisterEasing(["easeOutCubic", generateBezier(0.215, 0.61, 0.355, 1)]);\n\tregisterEasing(["easeInOutCubic", generateBezier(0.645, 0.045, 0.355, 1)]);\n\tregisterEasing(["easeInQuart", generateBezier(0.895, 0.03, 0.685, 0.22)]);\n\tregisterEasing(["easeOutQuart", generateBezier(0.165, 0.84, 0.44, 1)]);\n\tregisterEasing(["easeInOutQuart", generateBezier(0.77, 0, 0.175, 1)]);\n\tregisterEasing(["easeInQuint", generateBezier(0.755, 0.05, 0.855, 0.06)]);\n\tregisterEasing(["easeOutQuint", generateBezier(0.23, 1, 0.32, 1)]);\n\tregisterEasing(["easeInOutQuint", generateBezier(0.86, 0, 0.07, 1)]);\n\tregisterEasing(["easeInExpo", generateBezier(0.95, 0.05, 0.795, 0.035)]);\n\tregisterEasing(["easeOutExpo", generateBezier(0.19, 1, 0.22, 1)]);\n\tregisterEasing(["easeInOutExpo", generateBezier(1, 0, 0, 1)]);\n\tregisterEasing(["easeInCirc", generateBezier(0.6, 0.04, 0.98, 0.335)]);\n\tregisterEasing(["easeOutCirc", generateBezier(0.075, 0.82, 0.165, 1)]);\n\tregisterEasing(["easeInOutCirc", generateBezier(0.785, 0.135, 0.15, 0.86)]);\n\n\t/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */\n\t/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass\n   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */\n\tfunction springAccelerationForState(state) {\n\t\treturn -state.tension * state.x - state.friction * state.v;\n\t}\n\tfunction springEvaluateStateWithDerivative(initialState, dt, derivative) {\n\t\tvar state = {\n\t\t\tx: initialState.x + derivative.dx * dt,\n\t\t\tv: initialState.v + derivative.dv * dt,\n\t\t\ttension: initialState.tension,\n\t\t\tfriction: initialState.friction\n\t\t};\n\t\treturn {\n\t\t\tdx: state.v,\n\t\t\tdv: springAccelerationForState(state)\n\t\t};\n\t}\n\tfunction springIntegrateState(state, dt) {\n\t\tvar a = {\n\t\t\t\tdx: state.v,\n\t\t\t\tdv: springAccelerationForState(state)\n\t\t\t},\n\t\t\tb = springEvaluateStateWithDerivative(state, dt * 0.5, a),\n\t\t\tc = springEvaluateStateWithDerivative(state, dt * 0.5, b),\n\t\t\td = springEvaluateStateWithDerivative(state, dt, c),\n\t\t\tdxdt = 1 / 6 * (a.dx + 2 * (b.dx + c.dx) + d.dx),\n\t\t\tdvdt = 1 / 6 * (a.dv + 2 * (b.dv + c.dv) + d.dv);\n\t\tstate.x = state.x + dxdt * dt;\n\t\tstate.v = state.v + dvdt * dt;\n\t\treturn state;\n\t}\n\tfunction generateSpringRK4(tension, friction, duration) {\n\t\tvar initState = {\n\t\t\t\tx: -1,\n\t\t\t\tv: 0,\n\t\t\t\ttension: parseFloat(tension) || 500,\n\t\t\t\tfriction: parseFloat(friction) || 20\n\t\t\t},\n\t\t\tpath = [0],\n\t\t\ttolerance = 1 / 10000,\n\t\t\tDT = 16 / 1000,\n\t\t\thaveDuration = duration != null; // deliberate "==", as undefined == null != 0\n\t\tvar timeLapsed = 0,\n\t\t\tdt = void 0,\n\t\t\tlastState = void 0;\n\t\t/* Calculate the actual time it takes for this animation to complete with the provided conditions. */\n\t\tif (haveDuration) {\n\t\t\t/* Run the simulation without a duration. */\n\t\t\ttimeLapsed = generateSpringRK4(initState.tension, initState.friction);\n\t\t\t/* Compute the adjusted time delta. */\n\t\t\tdt = timeLapsed / duration * DT;\n\t\t} else {\n\t\t\tdt = DT;\n\t\t}\n\t\twhile (true) {\n\t\t\t/* Next/step function .*/\n\t\t\tlastState = springIntegrateState(lastState || initState, dt);\n\t\t\t/* Store the position. */\n\t\t\tpath.push(1 + lastState.x);\n\t\t\ttimeLapsed += 16;\n\t\t\t/* If the change threshold is reached, break. */\n\t\t\tif (!(Math.abs(lastState.x) > tolerance && Math.abs(lastState.v) > tolerance)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t/* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the\n       computed path and returns a snapshot of the position according to a given percentComplete. */\n\t\treturn !haveDuration ? timeLapsed : function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn startValue + path[Math.floor(percentComplete * (path.length - 1))] * (endValue - startValue);\n\t\t};\n\t}\n\n\t// Constants\n\tvar cache = {};\n\tfunction generateStep(steps) {\n\t\tvar fn = cache[steps];\n\t\tif (fn) {\n\t\t\treturn fn;\n\t\t}\n\t\treturn cache[steps] = function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn startValue + Math.round(percentComplete * steps) * (1 / steps) * (endValue - startValue);\n\t\t};\n\t}\n\n\t// Project\n\t/**\n\t * Parse a duration value and return an ms number. Optionally return a\n\t * default value if the number is not valid.\n\t */\n\tfunction parseDuration(duration, def) {\n\t\tif (isNumber(duration)) {\n\t\t\treturn duration;\n\t\t}\n\t\tif (isString(duration)) {\n\t\t\treturn Duration[duration.toLowerCase()] || parseFloat(duration.replace("ms", "").replace("s", "000"));\n\t\t}\n\t\treturn def == null ? undefined : parseDuration(def);\n\t}\n\t/**\n\t * Validate a <code>cache</code> option.\n\t */\n\tfunction validateCache(value) {\n\t\tif (isBoolean(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'cache\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>begin</code> option.\n\t */\n\tfunction validateBegin(value) {\n\t\tif (isFunction(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'begin\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>complete</code> option.\n\t */\n\tfunction validateComplete(value, noError) {\n\t\tif (isFunction(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null && !noError) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'complete\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>delay</code> option.\n\t */\n\tfunction validateDelay(value) {\n\t\tvar parsed = parseDuration(value);\n\t\tif (!isNaN(parsed)) {\n\t\t\treturn parsed;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.error("VelocityJS: Trying to set \'delay\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>duration</code> option.\n\t */\n\tfunction validateDuration(value, noError) {\n\t\tvar parsed = parseDuration(value);\n\t\tif (!isNaN(parsed) && parsed >= 0) {\n\t\t\treturn parsed;\n\t\t}\n\t\tif (value != null && !noError) {\n\t\t\tconsole.error("VelocityJS: Trying to set \'duration\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>easing</code> option.\n\t */\n\tfunction validateEasing(value, duration, noError) {\n\t\tif (isString(value)) {\n\t\t\t// Named easing\n\t\t\treturn Easings[value];\n\t\t}\n\t\tif (isFunction(value)) {\n\t\t\treturn value;\n\t\t}\n\t\t// TODO: We should only do these if the correct function exists - don\'t force loading.\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 1) {\n\t\t\t\t// Steps\n\t\t\t\treturn generateStep(value[0]);\n\t\t\t}\n\t\t\tif (value.length === 2) {\n\t\t\t\t// springRK4 must be passed the animation\'s duration.\n\t\t\t\t// Note: If the springRK4 array contains non-numbers,\n\t\t\t\t// generateSpringRK4() returns an easing function generated with\n\t\t\t\t// default tension and friction values.\n\t\t\t\treturn generateSpringRK4(value[0], value[1], duration);\n\t\t\t}\n\t\t\tif (value.length === 4) {\n\t\t\t\t// Note: If the bezier array contains non-numbers, generateBezier()\n\t\t\t\t// returns undefined.\n\t\t\t\treturn generateBezier.apply(null, value) || false;\n\t\t\t}\n\t\t}\n\t\tif (value != null && !noError) {\n\t\t\tconsole.error("VelocityJS: Trying to set \'easing\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>fpsLimit</code> option.\n\t */\n\tfunction validateFpsLimit(value) {\n\t\tif (value === false) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tvar parsed = parseInt(value, 10);\n\t\t\tif (!isNaN(parsed) && parsed >= 0) {\n\t\t\t\treturn Math.min(parsed, 60);\n\t\t\t}\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'fpsLimit\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>loop</code> option.\n\t */\n\tfunction validateLoop(value) {\n\t\tswitch (value) {\n\t\t\tcase false:\n\t\t\t\treturn 0;\n\t\t\tcase true:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\tvar parsed = parseInt(value, 10);\n\t\t\t\tif (!isNaN(parsed) && parsed >= 0) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'loop\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>progress</code> option.\n\t */\n\tfunction validateProgress(value) {\n\t\tif (isFunction(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'progress\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>promise</code> option.\n\t */\n\tfunction validatePromise(value) {\n\t\tif (isBoolean(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'promise\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>promiseRejectEmpty</code> option.\n\t */\n\tfunction validatePromiseRejectEmpty(value) {\n\t\tif (isBoolean(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'promiseRejectEmpty\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>queue</code> option.\n\t */\n\tfunction validateQueue(value, noError) {\n\t\tif (value === false || isString(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null && !noError) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'queue\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>repeat</code> option.\n\t */\n\tfunction validateRepeat(value) {\n\t\tswitch (value) {\n\t\t\tcase false:\n\t\t\t\treturn 0;\n\t\t\tcase true:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\tvar parsed = parseInt(value, 10);\n\t\t\t\tif (!isNaN(parsed) && parsed >= 0) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'repeat\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>speed</code> option.\n\t */\n\tfunction validateSpeed(value) {\n\t\tif (isNumber(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.error("VelocityJS: Trying to set \'speed\' to an invalid value:", value);\n\t\t}\n\t}\n\t/**\n\t * Validate a <code>sync</code> option.\n\t */\n\tfunction validateSync(value) {\n\t\tif (isBoolean(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (value != null) {\n\t\t\tconsole.error("VelocityJS: Trying to set \'sync\' to an invalid value:", value);\n\t\t}\n\t}\n\n\t// Project\n\t// NOTE: Add the variable here, then add the default state in "reset" below.\n\tvar cache$1 = void 0,\n\t\tbegin = void 0,\n\t\tcomplete = void 0,\n\t\tdelay = void 0,\n\t\tduration = void 0,\n\t\teasing = void 0,\n\t\tfpsLimit = void 0,\n\t\tloop = void 0,\n\t\tmobileHA = void 0,\n\t\tminFrameTime = void 0,\n\t\tpromise = void 0,\n\t\tpromiseRejectEmpty = void 0,\n\t\tqueue = void 0,\n\t\trepeat = void 0,\n\t\tspeed = void 0,\n\t\tsync = void 0;\n\tvar defaults$1 = function () {\n\t\tfunction defaults$$1() {\n\t\t\tclassCallCheck(this, defaults$$1);\n\t\t}\n\n\t\tcreateClass(defaults$$1, null, [{\n\t\t\tkey: "reset",\n\t\t\tvalue: function reset() {\n\t\t\t\tcache$1 = DEFAULT_CACHE;\n\t\t\t\tbegin = undefined;\n\t\t\t\tcomplete = undefined;\n\t\t\t\tdelay = DEFAULT_DELAY;\n\t\t\t\tduration = DEFAULT_DURATION;\n\t\t\t\teasing = validateEasing(DEFAULT_EASING, DEFAULT_DURATION);\n\t\t\t\tfpsLimit = DEFAULT_FPSLIMIT;\n\t\t\t\tloop = DEFAULT_LOOP;\n\t\t\t\tminFrameTime = FUZZY_MS_PER_SECOND / DEFAULT_FPSLIMIT;\n\t\t\t\tpromise = DEFAULT_PROMISE;\n\t\t\t\tpromiseRejectEmpty = DEFAULT_PROMISE_REJECT_EMPTY;\n\t\t\t\tqueue = DEFAULT_QUEUE;\n\t\t\t\trepeat = DEFAULT_REPEAT;\n\t\t\t\tspeed = DEFAULT_SPEED;\n\t\t\t\tsync = DEFAULT_SYNC;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "cache",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn cache$1;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateCache(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tcache$1 = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "begin",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn begin;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateBegin(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tbegin = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "complete",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn complete;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateComplete(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tcomplete = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "delay",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn delay;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateDelay(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tdelay = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "duration",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn duration;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateDuration(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tduration = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "easing",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn easing;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateEasing(value, duration);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\teasing = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "fpsLimit",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn fpsLimit;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateFpsLimit(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tfpsLimit = value;\n\t\t\t\t\tminFrameTime = FUZZY_MS_PER_SECOND / value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "loop",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn loop;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateLoop(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tloop = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "mobileHA",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn mobileHA;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tif (isBoolean(value)) {\n\t\t\t\t\tmobileHA = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "minFrameTime",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn minFrameTime;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "promise",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validatePromise(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tpromise = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "promiseRejectEmpty",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn promiseRejectEmpty;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validatePromiseRejectEmpty(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tpromiseRejectEmpty = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "queue",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn queue;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateQueue(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tqueue = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "repeat",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn repeat;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateRepeat(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\trepeat = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "repeatAgain",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn repeat;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "speed",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn speed;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateSpeed(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tspeed = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: "sync",\n\t\t\tget: function get$$1() {\n\t\t\t\treturn sync;\n\t\t\t},\n\t\t\tset: function set$$1(value) {\n\t\t\t\tvalue = validateSync(value);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tsync = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\t\treturn defaults$$1;\n\t}();\n\tObject.freeze(defaults$1);\n\t// Reset to our default values, currently everything is undefined.\n\tdefaults$1.reset();\n\n\t/**\n\t * The highest type index for finding the best normalization for a property.\n\t */\n\t/**\n\t * Unlike "actions", normalizations can always be replaced by users.\n\t */\n\tvar Normalizations = [];\n\t/**\n\t * Store a cross-reference to units to be added to specific normalization\n\t * functions if the user supplies a unit-less number.\n\t *\n\t * This is pretty much confined to adding "px" to several css properties.\n\t */\n\tvar NormalizationUnits = {};\n\t/**\n\t * Any normalisations that should never be cached are listed here.\n\t * Faster than an array - https://jsperf.com/array-includes-and-find-methods-vs-set-has\n\t */\n\tvar NoCacheNormalizations = new Set();\n\t/**\n\t * An array of classes used for the per-class normalizations. This\n\t * translates into a bitwise enum for quick cross-reference, and so that\n\t * the element doesn\'t need multiple <code>instanceof</code> calls every\n\t * frame.\n\t */\n\tvar constructors = [];\n\t/**\n\t * A cache of the various constructors we\'ve found and mapping to their real\n\t * name - saves expensive lookups.\n\t */\n\tvar constructorCache = new Map();\n\n\t// Project\n\t// Constants\n\tvar dataName = "velocityData";\n\t/**\n\t * Get (and create) the internal data store for an element.\n\t */\n\tfunction Data(element) {\n\t\t// Use a string member so Uglify doesn\'t mangle it.\n\t\tvar data = element[dataName];\n\t\tif (data) {\n\t\t\treturn data;\n\t\t}\n\t\tvar window = element.ownerDocument.defaultView;\n\t\tvar types = 0;\n\t\tfor (var index = 0; index < constructors.length; index++) {\n\t\t\tvar _constructor = constructors[index];\n\t\t\tif (isString(_constructor)) {\n\t\t\t\tif (element instanceof window[_constructor]) {\n\t\t\t\t\ttypes |= 1 << index; // tslint:disable-line:no-bitwise\n\t\t\t\t}\n\t\t\t} else if (element instanceof _constructor) {\n\t\t\t\ttypes |= 1 << index; // tslint:disable-line:no-bitwise\n\t\t\t}\n\t\t}\n\t\t// Use an intermediate object so it errors on incorrect data.\n\t\tvar newData = {\n\t\t\ttypes: types,\n\t\t\tcount: 0,\n\t\t\tcomputedStyle: null,\n\t\t\tcache: {},\n\t\t\tqueueList: {},\n\t\t\tlastAnimationList: {},\n\t\t\tlastFinishList: {},\n\t\t\twindow: window\n\t\t};\n\t\tObject.defineProperty(element, dataName, {\n\t\t\tvalue: newData\n\t\t});\n\t\treturn newData;\n\t}\n\n\t// Constants\n\tvar isClient = window && window === window.window,\n\t\twindowScrollAnchor = isClient && window.pageYOffset !== undefined;\n\tvar State = {\n\t\tisClient: isClient,\n\t\tisMobile: isClient && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n\t\tisGingerbread: isClient && /Android 2\\.3\\.[3-7]/i.test(navigator.userAgent),\n\t\tprefixElement: isClient && document.createElement("div"),\n\t\twindowScrollAnchor: windowScrollAnchor,\n\t\tscrollAnchor: windowScrollAnchor ? window : !isClient || document.documentElement || document.body.parentNode || document.body,\n\t\tscrollPropertyLeft: windowScrollAnchor ? "pageXOffset" : "scrollLeft",\n\t\tscrollPropertyTop: windowScrollAnchor ? "pageYOffset" : "scrollTop",\n\t\tclassName: CLASSNAME,\n\t\tisTicking: false,\n\t\tfirst: undefined,\n\t\tlast: undefined,\n\t\tfirstNew: undefined\n\t};\n\n\t// Project\n\t/**\n\t * Simple queue management. Un-named queue is directly within the element data,\n\t * named queue is within an object within it.\n\t */\n\tfunction animate(animation) {\n\t\tvar prev = State.last;\n\t\tanimation._prev = prev;\n\t\tanimation._next = undefined;\n\t\tif (prev) {\n\t\t\tprev._next = animation;\n\t\t} else {\n\t\t\tState.first = animation;\n\t\t}\n\t\tState.last = animation;\n\t\tif (!State.firstNew) {\n\t\t\tState.firstNew = animation;\n\t\t}\n\t\tvar element = animation.element,\n\t\t\tdata = Data(element);\n\t\tif (!data.count++) {\n\t\t\t////////////////////////\n\t\t\t// Feature: Classname //\n\t\t\t////////////////////////\n\t\t\taddClass(element, State.className);\n\t\t}\n\t}\n\t/**\n\t * Add an item to an animation queue.\n\t */\n\tfunction queue$1(element, animation, queueName) {\n\t\tvar data = Data(element);\n\t\tif (queueName !== false) {\n\t\t\t// Store the last animation added so we can use it for the\n\t\t\t// beginning of the next one.\n\t\t\tdata.lastAnimationList[queueName] = animation;\n\t\t}\n\t\tif (queueName === false) {\n\t\t\tanimate(animation);\n\t\t} else {\n\t\t\tif (!isString(queueName)) {\n\t\t\t\tqueueName = "";\n\t\t\t}\n\t\t\tvar last = data.queueList[queueName];\n\t\t\tif (!last) {\n\t\t\t\tif (last === null) {\n\t\t\t\t\tdata.queueList[queueName] = animation;\n\t\t\t\t} else {\n\t\t\t\t\tdata.queueList[queueName] = null;\n\t\t\t\t\tanimate(animation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (last._next) {\n\t\t\t\t\tlast = last._next;\n\t\t\t\t}\n\t\t\t\tlast._next = animation;\n\t\t\t\tanimation._prev = last;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Start the next animation on this element\'s queue (named or default).\n\t *\n\t * @returns the next animation that is starting.\n\t */\n\tfunction dequeue(element, queueName, skip) {\n\t\tif (queueName !== false) {\n\t\t\tif (!isString(queueName)) {\n\t\t\t\tqueueName = "";\n\t\t\t}\n\t\t\tvar data = Data(element),\n\t\t\t\tanimation = data.queueList[queueName];\n\t\t\tif (animation) {\n\t\t\t\tdata.queueList[queueName] = animation._next || null;\n\t\t\t\tif (!skip) {\n\t\t\t\t\tanimate(animation);\n\t\t\t\t}\n\t\t\t} else if (animation === null) {\n\t\t\t\tdelete data.queueList[queueName];\n\t\t\t}\n\t\t\treturn animation;\n\t\t}\n\t}\n\t/**\n\t * Remove an animation from the active animation list. If it has a queue set\n\t * then remember it as the last animation for that queue, and free the one\n\t * that was previously there. If the animation list is completely empty then\n\t * mark us as finished.\n\t */\n\tfunction freeAnimationCall(animation) {\n\t\tvar next = animation._next,\n\t\t\tprev = animation._prev,\n\t\t\tqueueName = animation.queue == null ? animation.options.queue : animation.queue;\n\t\tif (State.firstNew === animation) {\n\t\t\tState.firstNew = next;\n\t\t}\n\t\tif (State.first === animation) {\n\t\t\tState.first = next;\n\t\t} else if (prev) {\n\t\t\tprev._next = next;\n\t\t}\n\t\tif (State.last === animation) {\n\t\t\tState.last = prev;\n\t\t} else if (next) {\n\t\t\tnext._prev = prev;\n\t\t}\n\t\tif (queueName) {\n\t\t\tvar data = Data(animation.element);\n\t\t\tif (data) {\n\t\t\t\tanimation._next = animation._prev = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar SequencesObject = {};\n\n\t// Project\n\t/**\n\t * Call the complete method of an animation in a separate function so it can\n\t * benefit from JIT compiling while still having a try/catch block.\n\t */\n\tfunction callComplete(activeCall) {\n\t\tvar callback = activeCall.complete || activeCall.options.complete;\n\t\tif (callback) {\n\t\t\ttry {\n\t\t\t\tvar elements = activeCall.elements;\n\t\t\t\tcallback.call(elements, elements, activeCall);\n\t\t\t} catch (error) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tthrow error;\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Complete an animation. This might involve restarting (for loop or repeat\n\t * options). Once it is finished we also check for any callbacks or Promises\n\t * that need updating.\n\t */\n\tfunction completeCall(activeCall) {\n\t\t// TODO: Check if it\'s not been completed already\n\t\tvar options = activeCall.options,\n\t\t\tqueue = getValue(activeCall.queue, options.queue),\n\t\t\tisLoop = getValue(activeCall.loop, options.loop, defaults$1.loop),\n\t\t\tisRepeat = getValue(activeCall.repeat, options.repeat, defaults$1.repeat),\n\t\t\tisStopped = activeCall._flags & 8 /* STOPPED */; // tslint:disable-line:no-bitwise\n\t\tif (!isStopped && (isLoop || isRepeat)) {\n\t\t\t////////////////////\n\t\t\t// Option: Loop   //\n\t\t\t// Option: Repeat //\n\t\t\t////////////////////\n\t\t\tif (isRepeat && isRepeat !== true) {\n\t\t\t\tactiveCall.repeat = isRepeat - 1;\n\t\t\t} else if (isLoop && isLoop !== true) {\n\t\t\t\tactiveCall.loop = isLoop - 1;\n\t\t\t\tactiveCall.repeat = getValue(activeCall.repeatAgain, options.repeatAgain, defaults$1.repeatAgain);\n\t\t\t}\n\t\t\tif (isLoop) {\n\t\t\t\tactiveCall._flags ^= 64 /* REVERSE */; // tslint:disable-line:no-bitwise\n\t\t\t}\n\t\t\tif (queue !== false) {\n\t\t\t\t// Can\'t be called when stopped so no need for an extra check.\n\t\t\t\tData(activeCall.element).lastFinishList[queue] = activeCall.timeStart + getValue(activeCall.duration, options.duration, defaults$1.duration);\n\t\t\t}\n\t\t\tactiveCall.timeStart = activeCall.ellapsedTime = activeCall.percentComplete = 0;\n\t\t\tactiveCall._flags &= ~4 /* STARTED */; // tslint:disable-line:no-bitwise\n\t\t} else {\n\t\t\tvar element = activeCall.element,\n\t\t\t\tdata = Data(element);\n\t\t\tif (! --data.count && !isStopped) {\n\t\t\t\t////////////////////////\n\t\t\t\t// Feature: Classname //\n\t\t\t\t////////////////////////\n\t\t\t\tremoveClass(element, State.className);\n\t\t\t}\n\t\t\t//////////////////////\n\t\t\t// Option: Complete //\n\t\t\t//////////////////////\n\t\t\t// If this is the last animation in this list then we can check for\n\t\t\t// and complete calls or Promises.\n\t\t\t// TODO: When deleting an element we need to adjust these values.\n\t\t\tif (options && ++options._completed === options._total) {\n\t\t\t\tif (!isStopped && options.complete) {\n\t\t\t\t\t// We don\'t call the complete if the animation is stopped,\n\t\t\t\t\t// and we clear the key to prevent it being called again.\n\t\t\t\t\tcallComplete(activeCall);\n\t\t\t\t\toptions.complete = null;\n\t\t\t\t}\n\t\t\t\tvar resolver = options._resolver;\n\t\t\t\tif (resolver) {\n\t\t\t\t\t// Fulfil the Promise\n\t\t\t\t\tresolver(activeCall.elements);\n\t\t\t\t\tdelete options._resolver;\n\t\t\t\t}\n\t\t\t}\n\t\t\t///////////////////\n\t\t\t// Option: Queue //\n\t\t\t///////////////////\n\t\t\tif (queue !== false) {\n\t\t\t\t// We only do clever things with queues...\n\t\t\t\tif (!isStopped) {\n\t\t\t\t\t// If we\'re not stopping an animation, we need to remember\n\t\t\t\t\t// what time it finished so that the next animation in\n\t\t\t\t\t// sequence gets the correct start time.\n\t\t\t\t\tdata.lastFinishList[queue] = activeCall.timeStart + getValue(activeCall.duration, options.duration, defaults$1.duration);\n\t\t\t\t}\n\t\t\t\t// Start the next animation in sequence, or delete the queue if\n\t\t\t\t// this was the last one.\n\t\t\t\tdequeue(element, queue);\n\t\t\t}\n\t\t\t// Cleanup any pointers, and remember the last animation etc.\n\t\t\tfreeAnimationCall(activeCall);\n\t\t}\n\t}\n\n\t// Project\n\t/**\n\t * Used to register a normalization. This should never be called by users\n\t * directly, instead it should be called via an action:<br/>\n\t * <code>Velocity("registerNormalization", "Element", "name", VelocityNormalizationsFn[, false]);</code>\n\t *\n\t * The second argument is the class of the animatable object. If this is passed\n\t * as a class name (ie, `"Element"` -> `window["Element"]`) then this will work\n\t * cross-iframe. If passed as an actual class (ie `Element`) then it will\n\t * attempt to find the class on the window and use that name instead. If it\n\t * can\'t find it then it will use the class passed, which allows for custom\n\t * animation targets, but will not work cross-iframe boundary.\n\t *\n\t * The fourth argument can be an explicit <code>false</code>, which prevents\n\t * the property from being cached. Please note that this can be dangerous\n\t * for performance!\n\t */\n\tfunction registerNormalization(args) {\n\t\tvar constructor = args[0],\n\t\t\tname = args[1],\n\t\t\tcallback = args[2];\n\t\tif (isString(constructor) && !(window[constructor] instanceof Object) || !isString(constructor) && !(constructor instanceof Object)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerNormalization\' constructor to an invalid value:", constructor);\n\t\t} else if (!isString(name)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerNormalization\' name to an invalid value:", name);\n\t\t} else if (!isFunction(callback)) {\n\t\t\tconsole.warn("VelocityJS: Trying to set \'registerNormalization\' callback to an invalid value:", name, callback);\n\t\t} else {\n\t\t\tvar index = constructors.indexOf(constructor),\n\t\t\t\tnextArg = 3;\n\t\t\tif (index < 0 && !isString(constructor)) {\n\t\t\t\tif (constructorCache.has(constructor)) {\n\t\t\t\t\tindex = constructors.indexOf(constructorCache.get(constructor));\n\t\t\t\t} else {\n\t\t\t\t\tfor (var property in window) {\n\t\t\t\t\t\tif (window[property] === constructor) {\n\t\t\t\t\t\t\tindex = constructors.indexOf(property);\n\t\t\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\t\t\tindex = constructors.push(property) - 1;\n\t\t\t\t\t\t\t\tNormalizations[index] = {};\n\t\t\t\t\t\t\t\tconstructorCache.set(constructor, property);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (index < 0) {\n\t\t\t\tindex = constructors.push(constructor) - 1;\n\t\t\t\tNormalizations[index] = {};\n\t\t\t}\n\t\t\tNormalizations[index][name] = callback;\n\t\t\tif (isString(args[nextArg])) {\n\t\t\t\tvar unit = args[nextArg++];\n\t\t\t\tvar units = NormalizationUnits[unit];\n\t\t\t\tif (!units) {\n\t\t\t\t\tunits = NormalizationUnits[unit] = [];\n\t\t\t\t}\n\t\t\t\tunits.push(callback);\n\t\t\t}\n\t\t\tif (args[nextArg] === false) {\n\t\t\t\tNoCacheNormalizations.add(name);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Used to check if a normalisation exists on a specific class.\n\t */\n\tfunction hasNormalization(args) {\n\t\tvar constructor = args[0],\n\t\t\tname = args[1];\n\t\tvar index = constructors.indexOf(constructor);\n\t\tif (index < 0 && !isString(constructor)) {\n\t\t\tif (constructorCache.has(constructor)) {\n\t\t\t\tindex = constructors.indexOf(constructorCache.get(constructor));\n\t\t\t} else {\n\t\t\t\tfor (var property in window) {\n\t\t\t\t\tif (window[property] === constructor) {\n\t\t\t\t\t\tindex = constructors.indexOf(property);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index >= 0 && Normalizations[index].hasOwnProperty(name);\n\t}\n\t/**\n\t * Get the unit to add to a unitless number based on the normalization used.\n\t */\n\tfunction getNormalizationUnit(fn) {\n\t\tfor (var unit in NormalizationUnits) {\n\t\t\tif (NormalizationUnits[unit].includes(fn)) {\n\t\t\t\treturn unit;\n\t\t\t}\n\t\t}\n\t\treturn "";\n\t}\n\t/**\n\t * Get the normalization for an element and propertyName combination. This\n\t * value should be cached at asking time, as it may change if the user adds\n\t * more normalizations.\n\t */\n\tfunction getNormalization(element, propertyName) {\n\t\tvar data = Data(element);\n\t\tvar fn = void 0;\n\t\tfor (var index = constructors.length - 1, types = data.types; !fn && index >= 0; index--) {\n\t\t\tif (types & 1 << index) {\n\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\tfn = Normalizations[index][propertyName];\n\t\t\t}\n\t\t}\n\t\treturn fn;\n\t}\n\tregisterAction(["registerNormalization", registerNormalization]);\n\tregisterAction(["hasNormalization", hasNormalization]);\n\n\t// Project\n\t/**\n\t * The singular setPropertyValue, which routes the logic for all\n\t * normalizations.\n\t */\n\tfunction setPropertyValue(element, propertyName, propertyValue, fn) {\n\t\tvar noCache = NoCacheNormalizations.has(propertyName),\n\t\t\tdata = !noCache && Data(element);\n\t\tif (noCache || data && data.cache[propertyName] !== propertyValue) {\n\t\t\t// By setting it to undefined we force a true "get" later\n\t\t\tif (!noCache) {\n\t\t\t\tdata.cache[propertyName] = propertyValue || undefined;\n\t\t\t}\n\t\t\tfn = fn || getNormalization(element, propertyName);\n\t\t\tif (fn) {\n\t\t\t\tfn(element, propertyValue);\n\t\t\t}\n\t\t\tif (Velocity$$1.debug >= 2) {\n\t\t\t\tconsole.info("Set \\"" + propertyName + "\\": \\"" + propertyValue + "\\"", element);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove nested `calc(0px + *)` or `calc(* + (0px + *))` correctly.\n\t */\n\tfunction removeNestedCalc(value) {\n\t\tif (value.indexOf("calc(") >= 0) {\n\t\t\tvar tokens = value.split(/([\\(\\)])/);\n\t\t\tvar depth = 0;\n\t\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\t\tvar token = tokens[i];\n\t\t\t\tswitch (token) {\n\t\t\t\t\tcase "(":\n\t\t\t\t\t\tdepth++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ")":\n\t\t\t\t\t\tdepth--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (depth && token[0] === "0") {\n\t\t\t\t\t\t\ttokens[i] = token.replace(/^0[a-z%]+ \\+ /, "");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens.join("").replace(/(?:calc)?\\(([0-9\\.]+[a-z%]+)\\)/g, "$1");\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Cache every camelCase match to avoid repeating lookups.\n\t */\n\tvar cache$2 = {};\n\t/**\n\t * Camelcase a property name into its JavaScript notation (e.g.\n\t * "background-color" ==> "backgroundColor"). Camelcasing is used to\n\t * normalize property names between and across calls.\n\t */\n\tfunction camelCase(property) {\n\t\tvar fixed = cache$2[property];\n\t\tif (fixed) {\n\t\t\treturn fixed;\n\t\t}\n\t\treturn cache$2[property] = property.replace(/-([a-z])/g, function ($, letter) {\n\t\t\treturn letter.toUpperCase();\n\t\t});\n\t}\n\n\t// Constants\n\tvar rxColor6 = /#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/gi,\n\t\trxColor3 = /#([a-f\\d])([a-f\\d])([a-f\\d])/gi,\n\t\trxColorName = /(rgba?\\(\\s*)?(\\b[a-z]+\\b)/g,\n\t\trxRGB = /rgb(a?)\\(([^\\)]+)\\)/gi,\n\t\trxSpaces = /\\s+/g;\n\t/**\n\t * This is the list of color names -> rgb values. The object is in here so\n\t * that the actual name conversion can be in a separate file and not\n\t * included for custom builds.\n\t */\n\tvar ColorNames = {};\n\t/**\n\t * Convert a hex list to an rgba value. Designed to be used in replace.\n\t */\n\tfunction makeRGBA(ignore, r, g, b) {\n\t\treturn "rgba(" + parseInt(r, 16) + "," + parseInt(g, 16) + "," + parseInt(b, 16) + ",1)";\n\t}\n\t/**\n\t * Replace any css colour name with its rgba() value. It is possible to use\n\t * the name within an "rgba(blue, 0.4)" string this way.\n\t */\n\tfunction fixColors(str) {\n\t\treturn str.replace(rxColor6, makeRGBA).replace(rxColor3, function ($0, r, g, b) {\n\t\t\treturn makeRGBA($0, r + r, g + g, b + b);\n\t\t}).replace(rxColorName, function ($0, $1, $2) {\n\t\t\tif (ColorNames[$2]) {\n\t\t\t\treturn ($1 ? $1 : "rgba(") + ColorNames[$2] + ($1 ? "" : ",1)");\n\t\t\t}\n\t\t\treturn $0;\n\t\t}).replace(rxRGB, function ($0, $1, $2) {\n\t\t\treturn "rgba(" + ($2.replace(rxSpaces, "") + ($1 ? "" : ",1")) + ")";\n\t\t});\n\t}\n\n\t// Project\n\t/**\n\t * Figure out the dimensions for this width / height based on the\n\t * potential borders and whether we care about them.\n\t */\n\tfunction augmentDimension(element, name, wantInner) {\n\t\tvar isBorderBox = getPropertyValue(element, "boxSizing").toString().toLowerCase() === "border-box";\n\t\tif (isBorderBox === wantInner) {\n\t\t\t// in box-sizing mode, the CSS width / height accessors already\n\t\t\t// give the outerWidth / outerHeight.\n\t\t\tvar sides = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"],\n\t\t\t\tfields = ["padding" + sides[0], "padding" + sides[1], "border" + sides[0] + "Width", "border" + sides[1] + "Width"];\n\t\t\tvar augment = 0;\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar field = _step.value;\n\n\t\t\t\t\tvar value = parseFloat(getPropertyValue(element, field));\n\t\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\t\taugment += value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn wantInner ? -augment : augment;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t// Project\n\t/**\n\t * Get the width or height of an element, pulled out as it can be used when the\n\t * in two locations so don\'t want to repeat it.\n\t */\n\tfunction getWidthHeight(element, property) {\n\t\treturn element.getBoundingClientRect()[property] + augmentDimension(element, property, true) + "px";\n\t}\n\t// TODO: This is still a complete mess\n\tfunction computePropertyValue(element, property) {\n\t\tvar data = Data(element),\n\n\t\t\t// If computedStyle is cached, use it. If not then get the correct one\n\t\t\t// for the element to support cross-iframe boundaries.\n\t\t\tcomputedStyle = data.computedStyle ? data.computedStyle : data.window.getComputedStyle(element, null);\n\t\tvar computedValue = 0;\n\t\tif (!data.computedStyle) {\n\t\t\tdata.computedStyle = computedStyle;\n\t\t}\n\t\tif (computedStyle["display"] === "none") {\n\t\t\tswitch (property) {\n\t\t\t\tcase "width":\n\t\t\t\tcase "height":\n\t\t\t\t\t// Browsers do not return height and width values for elements\n\t\t\t\t\t// that are set to display:"none". Thus, we temporarily toggle\n\t\t\t\t\t// display to the element type\'s default value.\n\t\t\t\t\tsetPropertyValue(element, "display", "auto");\n\t\t\t\t\tcomputedValue = getWidthHeight(element, property);\n\t\t\t\t\tsetPropertyValue(element, "display", "none");\n\t\t\t\t\treturn String(computedValue);\n\t\t\t}\n\t\t}\n\t\t/* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side\'s color.\n       Also, in all browsers, when border colors aren\'t all the same, a compound value is returned that Velocity isn\'t setup to parse.\n       So, as a polyfill for querying individual border side colors, we just return the top border\'s color and animate all borders from that value. */\n\t\t/* TODO: There is a borderColor normalisation in legacy/ - figure out where this is needed... */\n\t\tcomputedValue = computedStyle[property];\n\t\t/* Fall back to the property\'s style value (if defined) when computedValue returns nothing,\n       which can happen when the element hasn\'t been painted. */\n\t\tif (!computedValue) {\n\t\t\tcomputedValue = element.style[property];\n\t\t}\n\t\t/* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,\n       defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same\n       effect as being set to 0, so no conversion is necessary.) */\n\t\t/* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"\n       property, which reverts to "auto", left\'s value is 0 relative to its parent element, but is often non-zero relative\n       to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */\n\t\tif (computedValue === "auto") {\n\t\t\tswitch (property) {\n\t\t\t\tcase "width":\n\t\t\t\tcase "height":\n\t\t\t\t\tcomputedValue = getWidthHeight(element, property);\n\t\t\t\t\tbreak;\n\t\t\t\tcase "top":\n\t\t\t\tcase "left":\n\n\t\t\t\tcase "right":\n\t\t\t\tcase "bottom":\n\t\t\t\t\tvar position = getPropertyValue(element, "position");\n\t\t\t\t\tif (position === "fixed" || position === "absolute") {\n\t\t\t\t\t\t// Note: this has no pixel unit on its returned values,\n\t\t\t\t\t\t// we re-add it here to conform with\n\t\t\t\t\t\t// computePropertyValue\'s behavior.\n\t\t\t\t\t\tcomputedValue = element.getBoundingClientRect[property] + "px";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t// Deliberate fallthrough!\n\t\t\t\tdefault:\n\t\t\t\t\tcomputedValue = "0px";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn computedValue ? String(computedValue) : "";\n\t}\n\t/**\n\t * Get a property value. This will grab via the cache if it exists, then\n\t * via any normalisations.\n\t */\n\tfunction getPropertyValue(element, propertyName, fn, skipCache) {\n\t\tvar data = Data(element);\n\t\tvar propertyValue = void 0;\n\t\tif (NoCacheNormalizations.has(propertyName)) {\n\t\t\tskipCache = true;\n\t\t}\n\t\tif (!skipCache && data && data.cache[propertyName] != null) {\n\t\t\tpropertyValue = data.cache[propertyName];\n\t\t} else {\n\t\t\tfn = fn || getNormalization(element, propertyName);\n\t\t\tif (fn) {\n\t\t\t\tpropertyValue = fn(element);\n\t\t\t\tif (data) {\n\t\t\t\t\tdata.cache[propertyName] = propertyValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Velocity$$1.debug >= 2) {\n\t\t\tconsole.info("Get \\"" + propertyName + "\\": \\"" + propertyValue + "\\"", element);\n\t\t}\n\t\treturn propertyValue;\n\t}\n\n\t// Project\n\t// Constants\n\tvar rxHex = /^#([A-f\\d]{3}){1,2}$/i,\n\t\tcommands = {\n\t\t\tfunction: function _function(value, element, elements, elementArrayIndex, propertyName, tween) {\n\t\t\t\treturn value.call(element, elementArrayIndex, elements.length, propertyName);\n\t\t\t},\n\t\t\tnumber: function number(value, element, elements, elementArrayIndex, propertyName, tween) {\n\t\t\t\treturn String(value) + getNormalizationUnit(tween.fn);\n\t\t\t},\n\t\t\tstring: function string(value, element, elements, elementArrayIndex, propertyName, tween) {\n\t\t\t\treturn fixColors(value);\n\t\t\t},\n\t\t\tundefined: function undefined(value, element, elements, elementArrayIndex, propertyName, tween) {\n\t\t\t\treturn fixColors(getPropertyValue(element, propertyName, tween.fn) || "");\n\t\t\t}\n\t\t};\n\t/**\n\t * Expand a VelocityProperty argument into a valid sparse Tween array. This\n\t * pre-allocates the array as it is then the correct size and slightly\n\t * faster to access.\n\t */\n\tfunction expandProperties(animation, properties) {\n\t\tvar tweens = animation.tweens = Object.create(null),\n\t\t\telements = animation.elements,\n\t\t\telement = animation.element,\n\t\t\telementArrayIndex = elements.indexOf(element),\n\t\t\tdata = Data(element),\n\t\t\tqueue = getValue(animation.queue, animation.options.queue),\n\t\t\tduration = getValue(animation.options.duration, defaults$1.duration);\n\t\tfor (var property in properties) {\n\t\t\tif (properties.hasOwnProperty(property)) {\n\t\t\t\tvar propertyName = camelCase(property),\n\t\t\t\t\tfn = getNormalization(element, propertyName);\n\t\t\t\tvar valueData = properties[property];\n\t\t\t\tif (!fn && propertyName !== "tween") {\n\t\t\t\t\tif (Velocity$$1.debug) {\n\t\t\t\t\t\tconsole.log("Skipping \\"" + property + "\\" due to a lack of browser support.");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (valueData == null) {\n\t\t\t\t\tif (Velocity$$1.debug) {\n\t\t\t\t\t\tconsole.log("Skipping \\"" + property + "\\" due to no value supplied.");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar tween = tweens[propertyName] = {};\n\t\t\t\tvar endValue = void 0,\n\t\t\t\t\tstartValue = void 0;\n\t\t\t\ttween.fn = fn;\n\t\t\t\tif (isFunction(valueData)) {\n\t\t\t\t\t// If we have a function as the main argument then resolve\n\t\t\t\t\t// it first, in case it returns an array that needs to be\n\t\t\t\t\t// split.\n\t\t\t\t\tvalueData = valueData.call(element, elementArrayIndex, elements.length, elements);\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(valueData)) {\n\t\t\t\t\t// valueData is an array in the form of\n\t\t\t\t\t// [ endValue, [, easing] [, startValue] ]\n\t\t\t\t\tvar arr1 = valueData[1],\n\t\t\t\t\t\tarr2 = valueData[2];\n\t\t\t\t\tendValue = valueData[0];\n\t\t\t\t\tif (isString(arr1) && (/^[\\d-]/.test(arr1) || rxHex.test(arr1)) || isFunction(arr1) || isNumber(arr1)) {\n\t\t\t\t\t\tstartValue = arr1;\n\t\t\t\t\t} else if (isString(arr1) && Easings[arr1] || Array.isArray(arr1)) {\n\t\t\t\t\t\ttween.easing = validateEasing(arr1, duration);\n\t\t\t\t\t\tstartValue = arr2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartValue = arr1 || arr2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tendValue = valueData;\n\t\t\t\t}\n\t\t\t\ttween.end = commands[typeof endValue === "undefined" ? "undefined" : _typeof(endValue)](endValue, element, elements, elementArrayIndex, propertyName, tween);\n\t\t\t\tif (startValue != null || queue === false || data.queueList[queue] === undefined) {\n\t\t\t\t\ttween.start = commands[typeof startValue === "undefined" ? "undefined" : _typeof(startValue)](startValue, element, elements, elementArrayIndex, propertyName, tween);\n\t\t\t\t\texplodeTween(propertyName, tween, duration);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// TODO: Needs a better match for "translate3d" etc - a number must be preceded by some form of break...\n\tvar rxToken = /((?:[+\\-*/]=)?(?:[+-]?\\d*\\.\\d+|[+-]?\\d+)[a-z%]*|(?:.(?!$|[+-]?\\d|[+\\-*/]=[+-]?\\d))+.|.)/g,\n\t\trxNumber = /^([+\\-*/]=)?([+-]?\\d*\\.\\d+|[+-]?\\d+)(.*)$/;\n\t/**\n\t * Find a pattern between multiple strings, return a VelocitySequence with\n\t * the pattern and the tokenised values.\n\t *\n\t * If number then animate.\n\t * If a string then must match.\n\t * If units then convert between them by wrapping in a calc().\n\t * - If already in a calc then nest another layer.\n\t * If in an rgba() then the first three numbers are rounded.\n\t */\n\tfunction findPattern(parts, propertyName) {\n\t\tvar partsLength = parts.length,\n\t\t\ttokens = [],\n\t\t\tindexes = [];\n\t\tvar numbers = void 0;\n\t\t// First tokenise the strings - these have all values, we will pull\n\t\t// numbers later.\n\t\tfor (var part = 0; part < partsLength; part++) {\n\t\t\tif (isString(parts[part])) {\n\t\t\t\tif (parts[part] === "") {\n\t\t\t\t\ttokens[part] = [""];\n\t\t\t\t} else {\n\t\t\t\t\ttokens[part] = cloneArray(parts[part].match(rxToken));\n\t\t\t\t}\n\t\t\t\tindexes[part] = 0;\n\t\t\t\t// If it matches more than one thing then we\'ve got a number.\n\t\t\t\tnumbers = numbers || tokens[part].length > 1;\n\t\t\t\t//console.log(`tokens:`, parts[part], tokens[part])\n\t\t\t} else {\n\t\t\t\t// We have an incomplete lineup, it will get tried again later...\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvar sequence = [],\n\t\t\tpattern = sequence.pattern = [],\n\t\t\taddString = function addString(text) {\n\t\t\t\tif (isString(pattern[pattern.length - 1])) {\n\t\t\t\t\tpattern[pattern.length - 1] += text;\n\t\t\t\t} else if (text) {\n\t\t\t\t\tpattern.push(text);\n\t\t\t\t\tfor (var _part = 0; _part < partsLength; _part++) {\n\t\t\t\t\t\tsequence[_part].push(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\treturnStringType = function returnStringType() {\n\t\t\t\tif (numbers || pattern.length > 1) {\n\t\t\t\t\t//console.error(`Velocity: Trying to pattern match mis-matched strings "${propertyName}":`, parts);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar isDisplay = propertyName === "display",\n\t\t\t\t\tisVisibility = propertyName === "visibility";\n\t\t\t\tfor (var _part2 = 0; _part2 < partsLength; _part2++) {\n\t\t\t\t\tvar value = parts[_part2];\n\t\t\t\t\tsequence[_part2][0] = value;\n\t\t\t\t\t// Don\'t care about duration...\n\t\t\t\t\tsequence[_part2].easing = validateEasing(isDisplay && value === "none" || isVisibility && value === "hidden" || !isDisplay && !isVisibility ? "at-end" : "at-start", 400);\n\t\t\t\t}\n\t\t\t\tpattern[0] = false;\n\t\t\t\treturn sequence;\n\t\t\t};\n\t\tvar more = true;\n\t\tfor (var _part3 = 0; _part3 < partsLength; _part3++) {\n\t\t\tsequence[_part3] = [];\n\t\t}\n\t\twhile (more) {\n\t\t\tvar bits = [],\n\t\t\t\tunits = [];\n\t\t\tvar text = void 0,\n\t\t\t\tisUnitless = false,\n\t\t\t\thasNumbers = false;\n\t\t\tfor (var _part4 = 0; _part4 < partsLength; _part4++) {\n\t\t\t\tvar index = indexes[_part4]++,\n\t\t\t\t\ttoken = tokens[_part4][index];\n\t\t\t\tif (token) {\n\t\t\t\t\tvar num = token.match(rxNumber); // [ignore, change, number, unit]\n\t\t\t\t\tif (num) {\n\t\t\t\t\t\t// It\'s a number, possibly with a += change and unit.\n\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\treturn returnStringType();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar digits = parseFloat(num[2]),\n\t\t\t\t\t\t\tunit = num[3],\n\t\t\t\t\t\t\tchange = num[1] ? num[1][0] + unit : undefined,\n\t\t\t\t\t\t\tchangeOrUnit = change || unit;\n\t\t\t\t\t\tif (digits && !units.includes(changeOrUnit)) {\n\t\t\t\t\t\t\t// Will be an empty string at the least.\n\t\t\t\t\t\t\tunits.push(changeOrUnit);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!unit) {\n\t\t\t\t\t\t\tif (digits) {\n\t\t\t\t\t\t\t\thasNumbers = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tisUnitless = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbits[_part4] = change ? [digits, changeOrUnit, true] : [digits, changeOrUnit];\n\t\t\t\t\t} else if (bits.length) {\n\t\t\t\t\t\treturn returnStringType();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// It\'s a string.\n\t\t\t\t\t\tif (!text) {\n\t\t\t\t\t\t\ttext = token;\n\t\t\t\t\t\t} else if (text !== token) {\n\t\t\t\t\t\t\treturn returnStringType();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!_part4) {\n\t\t\t\t\tfor (; _part4 < partsLength; _part4++) {\n\t\t\t\t\t\tvar index2 = indexes[_part4]++;\n\t\t\t\t\t\tif (tokens[_part4][index2]) {\n\t\t\t\t\t\t\treturn returnStringType();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// IMPORTANT: This is the exit point.\n\t\t\t\t\tmore = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// Different\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (text) {\n\t\t\t\taddString(text);\n\t\t\t} else if (units.length) {\n\t\t\t\tif (units.length === 2 && isUnitless && !hasNumbers) {\n\t\t\t\t\t// If we only have two units, and one is empty, and it\'s only empty on "0", then treat us as having one unit\n\t\t\t\t\tunits.splice(units[0] ? 1 : 0, 1);\n\t\t\t\t}\n\t\t\t\tif (units.length === 1) {\n\t\t\t\t\t// All the same units, so append number then unit.\n\t\t\t\t\tvar _unit = units[0],\n\t\t\t\t\t\tfirstLetter = _unit[0];\n\t\t\t\t\tswitch (firstLetter) {\n\t\t\t\t\t\tcase "+":\n\t\t\t\t\t\tcase "-":\n\t\t\t\t\t\tcase "*":\n\t\t\t\t\t\tcase "/":\n\t\t\t\t\t\t\tif (propertyName) {\n\t\t\t\t\t\t\t\tconsole.error("Velocity: The first property must not contain a relative function \\"" + propertyName + "\\":", parts);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tpattern.push(false);\n\t\t\t\t\tfor (var _part5 = 0; _part5 < partsLength; _part5++) {\n\t\t\t\t\t\tsequence[_part5].push(bits[_part5][0]);\n\t\t\t\t\t}\n\t\t\t\t\taddString(_unit);\n\t\t\t\t} else {\n\t\t\t\t\t// Multiple units, so must be inside a calc.\n\t\t\t\t\taddString("calc(");\n\t\t\t\t\tvar patternCalc = pattern.length - 1; // Store the beginning of our calc.\n\t\t\t\t\tfor (var i = 0; i < units.length; i++) {\n\t\t\t\t\t\tvar _unit2 = units[i],\n\t\t\t\t\t\t\t_firstLetter = _unit2[0],\n\t\t\t\t\t\t\tisComplex = _firstLetter === "*" || _firstLetter === "/",\n\t\t\t\t\t\t\tisMaths = isComplex || _firstLetter === "+" || _firstLetter === "-";\n\t\t\t\t\t\tif (isComplex) {\n\t\t\t\t\t\t\t// TODO: Not sure this should be done automatically!\n\t\t\t\t\t\t\tpattern[patternCalc] += "(";\n\t\t\t\t\t\t\taddString(")");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i) {\n\t\t\t\t\t\t\taddString(" " + (isMaths ? _firstLetter : "+") + " ");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpattern.push(false);\n\t\t\t\t\t\tfor (var _part6 = 0; _part6 < partsLength; _part6++) {\n\t\t\t\t\t\t\tvar bit = bits[_part6],\n\t\t\t\t\t\t\t\tvalue = bit[1] === _unit2 ? bit[0] : bit.length === 3 ? sequence[_part6 - 1][sequence[_part6 - 1].length - 1] : isComplex ? 1 : 0;\n\t\t\t\t\t\t\tsequence[_part6].push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\taddString(isMaths ? _unit2.substring(1) : _unit2);\n\t\t\t\t\t}\n\t\t\t\t\taddString(")");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// We\'ve got here, so a valid sequence - now check and fix RGB rounding\n\t\t// and calc() nesting...\n\t\t// TODO: Nested calc(a + calc(b + c)) -> calc(a + (b + c))\n\t\tfor (var _i = 0, inRGB = 0; _i < pattern.length; _i++) {\n\t\t\tvar _text = pattern[_i];\n\t\t\tif (isString(_text)) {\n\t\t\t\tif (inRGB && _text.indexOf(",") >= 0) {\n\t\t\t\t\tinRGB++;\n\t\t\t\t} else if (_text.indexOf("rgb") >= 0) {\n\t\t\t\t\tinRGB = 1;\n\t\t\t\t}\n\t\t\t} else if (inRGB) {\n\t\t\t\tif (inRGB < 4) {\n\t\t\t\t\tpattern[_i] = true;\n\t\t\t\t} else {\n\t\t\t\t\tinRGB = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sequence;\n\t}\n\t/**\n\t * Convert a string-based tween with start and end strings, into a pattern\n\t * based tween with arrays.\n\t */\n\tfunction explodeTween(propertyName, tween, duration, starting) {\n\t\tvar startValue = tween.start,\n\t\t\tendValue = tween.end;\n\t\tif (!isString(endValue) || !isString(startValue)) {\n\t\t\treturn;\n\t\t}\n\t\tvar sequence = findPattern([startValue, endValue], propertyName);\n\t\tif (!sequence && starting) {\n\t\t\t// This little piece will take a startValue, split out the\n\t\t\t// various numbers in it, then copy the endValue into the\n\t\t\t// startValue while replacing the numbers in it to match the\n\t\t\t// original start numbers as a repeating sequence.\n\t\t\t// Finally this function will run again with the new\n\t\t\t// startValue and a now matching pattern.\n\t\t\tvar startNumbers = startValue.match(/\\d\\.?\\d*/g) || ["0"],\n\t\t\t\tcount = startNumbers.length;\n\t\t\tvar index = 0;\n\t\t\tsequence = findPattern([endValue.replace(/\\d+\\.?\\d*/g, function () {\n\t\t\t\treturn startNumbers[index++ % count];\n\t\t\t}), endValue], propertyName);\n\t\t}\n\t\tif (sequence) {\n\t\t\tif (Velocity$$1.debug) {\n\t\t\t\tconsole.log("Velocity: Sequence found:", sequence);\n\t\t\t}\n\t\t\tsequence[0].percent = 0;\n\t\t\tsequence[1].percent = 1;\n\t\t\ttween.sequence = sequence;\n\t\t\tswitch (tween.easing) {\n\t\t\t\tcase Easings["at-start"]:\n\t\t\t\tcase Easings["during"]:\n\t\t\t\tcase Easings["at-end"]:\n\t\t\t\t\tsequence[0].easing = sequence[1].easing = tween.easing;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Expand all queued animations that haven\'t gone yet\n\t *\n\t * This will automatically expand the properties map for any recently added\n\t * animations so that the start and end values are correct.\n\t */\n\tfunction validateTweens(activeCall) {\n\t\t// This might be called on an already-ready animation\n\t\tif (State.firstNew === activeCall) {\n\t\t\tState.firstNew = activeCall._next;\n\t\t}\n\t\t// Check if we\'re actually already ready\n\t\tif (activeCall._flags & 1 /* EXPANDED */) {\n\t\t\t// tslint:disable-line:no-bitwise\n\t\t\treturn;\n\t\t}\n\t\tvar element = activeCall.element,\n\t\t\ttweens = activeCall.tweens,\n\t\t\tduration = getValue(activeCall.options.duration, defaults$1.duration);\n\t\t// tslint:disable-next-line:forin\n\t\tfor (var propertyName in tweens) {\n\t\t\tvar tween = tweens[propertyName];\n\t\t\tif (tween.start == null) {\n\t\t\t\t// Get the start value as it\'s not been passed in\n\t\t\t\tvar startValue = getPropertyValue(activeCall.element, propertyName);\n\t\t\t\tif (isString(startValue)) {\n\t\t\t\t\ttween.start = fixColors(startValue);\n\t\t\t\t\texplodeTween(propertyName, tween, duration, true);\n\t\t\t\t} else if (!Array.isArray(startValue)) {\n\t\t\t\t\tconsole.warn("bad type", tween, propertyName, startValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Velocity$$1.debug) {\n\t\t\t\tconsole.log("tweensContainer \\"" + propertyName + "\\": " + JSON.stringify(tween), element);\n\t\t\t}\n\t\t}\n\t\tactiveCall._flags |= 1 /* EXPANDED */; // tslint:disable-line:no-bitwise\n\t}\n\n\t// Project\n\t/**\n\t * Call the begin method of an animation in a separate function so it can\n\t * benefit from JIT compiling while still having a try/catch block.\n\t */\n\tfunction beginCall(activeCall) {\n\t\tvar callback = activeCall.begin || activeCall.options.begin;\n\t\tif (callback) {\n\t\t\ttry {\n\t\t\t\tvar elements = activeCall.elements;\n\t\t\t\tcallback.call(elements, elements, activeCall);\n\t\t\t} catch (error) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tthrow error;\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Call the progress method of an animation in a separate function so it can\n\t * benefit from JIT compiling while still having a try/catch block.\n\t */\n\tfunction progressCall(activeCall) {\n\t\tvar callback = activeCall.progress || activeCall.options.progress;\n\t\tif (callback) {\n\t\t\ttry {\n\t\t\t\tvar elements = activeCall.elements,\n\t\t\t\t\tpercentComplete = activeCall.percentComplete,\n\t\t\t\t\toptions = activeCall.options,\n\t\t\t\t\ttweenValue = activeCall.tween;\n\t\t\t\tcallback.call(elements, elements, percentComplete, Math.max(0, activeCall.timeStart + (activeCall.duration != null ? activeCall.duration : options.duration != null ? options.duration : defaults$1.duration) - lastTick), tweenValue !== undefined ? tweenValue : String(percentComplete * 100), activeCall);\n\t\t\t} catch (error) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tthrow error;\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Call callbacks, potentially run async with the main animation thread.\n\t */\n\tfunction asyncCallbacks() {\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = progressed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar activeCall = _step.value;\n\n\t\t\t\tprogressCall(activeCall);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprogressed.clear();\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = completed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tvar _activeCall = _step2.value;\n\n\t\t\t\tcompleteCall(_activeCall);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcompleted.clear();\n\t}\n\t/**************\n\t Timing\n\t **************/\n\tvar FRAME_TIME = 1000 / 60,\n\n\t\t/**\n\t\t * Animations with a Complete callback.\n\t\t */\n\t\tcompleted = new Set(),\n\n\t\t/**\n\t\t * Animations with a Progress callback.\n\t\t */\n\t\tprogressed = new Set(),\n\n\t\t/**\n\t\t * Shim for window.performance in case it doesn\'t exist\n\t\t */\n\t\tperformance = function () {\n\t\t\tvar perf = window.performance || {};\n\t\t\tif (typeof perf.now !== "function") {\n\t\t\t\tvar nowOffset = perf.timing && perf.timing.navigationStart ? perf.timing.navigationStart : now();\n\t\t\t\tperf.now = function () {\n\t\t\t\t\treturn now() - nowOffset;\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn perf;\n\t\t}(),\n\n\t\t/**\n\t\t * Proxy function for when rAF is not available.\n\t\t *\n\t\t * This should hopefully never be used as the browsers often throttle\n\t\t * this to less than one frame per second in the background, making it\n\t\t * completely unusable.\n\t\t */\n\t\trAFProxy = function rAFProxy(callback) {\n\t\t\treturn setTimeout(callback, Math.max(0, FRAME_TIME - (performance.now() - lastTick)));\n\t\t},\n\n\t\t/**\n\t\t * Either requestAnimationFrame, or a shim for it.\n\t\t */\n\t\trAFShim = window.requestAnimationFrame || rAFProxy;\n\t/**\n\t * Set if we are currently inside a tick() to prevent double-calling.\n\t */\n\tvar ticking = void 0,\n\n\t\t/**\n\t\t * A background WebWorker that sends us framerate messages when we\'re in\n\t\t * the background. Without this we cannot maintain frame accuracy.\n\t\t */\n\t\tworker = void 0;\n\t/**\n\t * The time that the last animation frame ran at. Set from tick(), and used\n\t * for missing rAF (ie, when not in focus etc).\n\t */\n\tvar lastTick = 0;\n\t/**\n\t * WebWorker background function.\n\t *\n\t * When we\'re in the background this will send us a msg every tick, when in\n\t * the foreground it won\'t.\n\t *\n\t * When running in the background the browser reduces allowed CPU etc, so\n\t * we raun at 30fps instead of 60fps.\n\t */\n\tfunction workerFn() {\n\t\tvar _this = this;\n\n\t\tvar interval = void 0;\n\t\tthis.onmessage = function (e) {\n\t\t\tswitch (e.data) {\n\t\t\t\tcase true:\n\t\t\t\t\tif (!interval) {\n\t\t\t\t\t\tinterval = setInterval(function () {\n\t\t\t\t\t\t\t_this.postMessage(true);\n\t\t\t\t\t\t}, 1000 / 30);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase false:\n\t\t\t\t\tif (interval) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tinterval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t_this.postMessage(e.data);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\ttry {\n\t\t// Create the worker - this might not be supported, hence the try/catch.\n\t\tworker = new Worker(URL.createObjectURL(new Blob(["(" + workerFn + ")()"])));\n\t\t// Whenever the worker sends a message we tick()\n\t\tworker.onmessage = function (e) {\n\t\t\tif (e.data === true) {\n\t\t\t\ttick();\n\t\t\t} else {\n\t\t\t\tasyncCallbacks();\n\t\t\t}\n\t\t};\n\t\t// And watch for going to the background to start the WebWorker running.\n\t\tif (!State.isMobile && document.hidden !== undefined) {\n\t\t\tdocument.addEventListener("visibilitychange", function () {\n\t\t\t\tworker.postMessage(State.isTicking && document.hidden);\n\t\t\t});\n\t\t}\n\t} catch (e) {}\n\t/*\n   * WebWorkers are not supported in this format. This can happen in IE10\n   * where it can\'t create one from a blob this way. We fallback, but make\n   * no guarantees towards accuracy in this case.\n   */\n\n\t/**\n\t * Called on every tick, preferably through rAF. This is reponsible for\n\t * initialising any new animations, then starting any that need starting.\n\t * Finally it will expand any tweens and set the properties relating to\n\t * them. If there are any callbacks relating to the animations then they\n\t * will attempt to call at the end (with the exception of "begin").\n\t */\n\tfunction tick(timestamp) {\n\t\tif (ticking) {\n\t\t\t// Should never happen - but if we\'ve swapped back from hidden to\n\t\t\t// visibile then we want to make sure\n\t\t\treturn;\n\t\t}\n\t\tticking = true;\n\t\t/* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.\n       We leverage this metadata to fully ignore the first tick pass since RAF\'s initial pass is fired whenever\n       the browser\'s next tick sync time occurs, which results in the first elements subjected to Velocity\n       calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore\n       the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated\n       by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */\n\t\tif (timestamp !== false) {\n\t\t\tvar timeCurrent = performance.now(),\n\t\t\t\tdeltaTime = lastTick ? timeCurrent - lastTick : FRAME_TIME,\n\t\t\t\tdefaultSpeed = defaults$1.speed,\n\t\t\t\tdefaultEasing = defaults$1.easing,\n\t\t\t\tdefaultDuration = defaults$1.duration;\n\t\t\tvar activeCall = void 0,\n\t\t\t\tnextCall = void 0;\n\t\t\tif (deltaTime >= defaults$1.minFrameTime || !lastTick) {\n\t\t\t\tlastTick = timeCurrent;\n\t\t\t\t/********************\n\t\t\t\t Call Iteration\n\t\t\t\t ********************/\n\t\t\t\t// Expand any tweens that might need it.\n\t\t\t\twhile (State.firstNew) {\n\t\t\t\t\tvalidateTweens(State.firstNew);\n\t\t\t\t}\n\t\t\t\t// Iterate through each active call.\n\t\t\t\tfor (activeCall = State.first; activeCall && activeCall !== State.firstNew; activeCall = activeCall._next) {\n\t\t\t\t\tvar element = activeCall.element,\n\t\t\t\t\t\tdata = Data(element);\n\t\t\t\t\t// Check to see if this element has been deleted midway\n\t\t\t\t\t// through the animation. If it\'s gone then end this\n\t\t\t\t\t// animation.\n\t\t\t\t\tif (!element.parentNode || !data) {\n\t\t\t\t\t\t// TODO: Remove safely - decrease count, delete data, remove from arrays\n\t\t\t\t\t\tfreeAnimationCall(activeCall);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Don\'t bother getting until we can use these.\n\t\t\t\t\tvar options = activeCall.options,\n\t\t\t\t\t\tflags = activeCall._flags;\n\t\t\t\t\tvar timeStart = activeCall.timeStart;\n\t\t\t\t\t// If this is the first time that this call has been\n\t\t\t\t\t// processed by tick() then we assign timeStart now so that\n\t\t\t\t\t// it\'s value is as close to the real animation start time\n\t\t\t\t\t// as possible.\n\t\t\t\t\tif (!timeStart) {\n\t\t\t\t\t\tvar queue = activeCall.queue != null ? activeCall.queue : options.queue;\n\t\t\t\t\t\ttimeStart = timeCurrent - deltaTime;\n\t\t\t\t\t\tif (queue !== false) {\n\t\t\t\t\t\t\ttimeStart = Math.max(timeStart, data.lastFinishList[queue] || 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactiveCall.timeStart = timeStart;\n\t\t\t\t\t}\n\t\t\t\t\t// If this animation is paused then skip processing unless\n\t\t\t\t\t// it has been set to resume.\n\t\t\t\t\tif (flags & 16 /* PAUSED */) {\n\t\t\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t\t\t// Update the time start to accomodate the paused\n\t\t\t\t\t\t// completion amount.\n\t\t\t\t\t\tactiveCall.timeStart += deltaTime;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Check if this animation is ready - if it\'s synced then it\n\t\t\t\t\t// needs to wait for all other animations in the sync\n\t\t\t\t\tif (!(flags & 2 /* READY */)) {\n\t\t\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t\t\tactiveCall._flags |= 2 /* READY */; // tslint:disable-line:no-bitwise\n\t\t\t\t\t\toptions._ready++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Need to split the loop, as ready sync animations must all get\n\t\t\t\t// the same start time.\n\t\t\t\tfor (activeCall = State.first; activeCall && activeCall !== State.firstNew; activeCall = nextCall) {\n\t\t\t\t\tvar _flags = activeCall._flags;\n\t\t\t\t\tnextCall = activeCall._next;\n\t\t\t\t\tif (!(_flags & 2 /* READY */) || _flags & 16 /* PAUSED */) {\n\t\t\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar _options = activeCall.options;\n\t\t\t\t\tif (_flags & 32 /* SYNC */ && _options._ready < _options._total) {\n\t\t\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t\t\tactiveCall.timeStart += deltaTime;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar speed = activeCall.speed != null ? activeCall.speed : _options.speed != null ? _options.speed : defaultSpeed;\n\t\t\t\t\tvar _timeStart = activeCall.timeStart;\n\t\t\t\t\t// Don\'t bother getting until we can use these.\n\t\t\t\t\tif (!(_flags & 4 /* STARTED */)) {\n\t\t\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t\t\tvar delay = activeCall.delay != null ? activeCall.delay : _options.delay;\n\t\t\t\t\t\t// Make sure anything we\'ve delayed doesn\'t start\n\t\t\t\t\t\t// animating yet, there might still be an active delay\n\t\t\t\t\t\t// after something has been un-paused\n\t\t\t\t\t\tif (delay) {\n\t\t\t\t\t\t\tif (_timeStart + delay / speed > timeCurrent) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactiveCall.timeStart = _timeStart += delay / (delay > 0 ? speed : 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactiveCall._flags |= 4 /* STARTED */; // tslint:disable-line:no-bitwise\n\t\t\t\t\t\t// The begin callback is fired once per call, not once\n\t\t\t\t\t\t// per element, and is passed the full raw DOM element\n\t\t\t\t\t\t// set as both its context and its first argument.\n\t\t\t\t\t\tif (_options._started++ === 0) {\n\t\t\t\t\t\t\t_options._first = activeCall;\n\t\t\t\t\t\t\tif (_options.begin) {\n\t\t\t\t\t\t\t\t// Pass to an external fn with a try/catch block for optimisation\n\t\t\t\t\t\t\t\tbeginCall(activeCall);\n\t\t\t\t\t\t\t\t// Only called once, even if reversed or repeated\n\t\t\t\t\t\t\t\t_options.begin = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (speed !== 1) {\n\t\t\t\t\t\t// On the first frame we may have a shorter delta\n\t\t\t\t\t\t// const delta = Math.min(deltaTime, timeCurrent - timeStart);\n\t\t\t\t\t\tactiveCall.timeStart = _timeStart += Math.min(deltaTime, timeCurrent - _timeStart) * (1 - speed);\n\t\t\t\t\t}\n\t\t\t\t\tvar activeEasing = activeCall.easing != null ? activeCall.easing : _options.easing != null ? _options.easing : defaultEasing,\n\t\t\t\t\t\tmillisecondsEllapsed = activeCall.ellapsedTime = timeCurrent - _timeStart,\n\t\t\t\t\t\tduration = activeCall.duration != null ? activeCall.duration : _options.duration != null ? _options.duration : defaultDuration,\n\t\t\t\t\t\tpercentComplete = activeCall.percentComplete = Velocity$$1.mock ? 1 : Math.min(millisecondsEllapsed / duration, 1),\n\t\t\t\t\t\ttweens = activeCall.tweens,\n\t\t\t\t\t\treverse = _flags & 64 /* REVERSE */; // tslint:disable-line:no-bitwise\n\t\t\t\t\tif (activeCall.progress || _options._first === activeCall && _options.progress) {\n\t\t\t\t\t\tprogressed.add(activeCall);\n\t\t\t\t\t}\n\t\t\t\t\tif (percentComplete === 1) {\n\t\t\t\t\t\tcompleted.add(activeCall);\n\t\t\t\t\t}\n\t\t\t\t\t// tslint:disable-next-line:forin\n\t\t\t\t\tfor (var property in tweens) {\n\t\t\t\t\t\t// For every element, iterate through each property.\n\t\t\t\t\t\tvar tween = tweens[property],\n\t\t\t\t\t\t\tsequence = tween.sequence,\n\t\t\t\t\t\t\tpattern = sequence.pattern;\n\t\t\t\t\t\tvar currentValue = "",\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tif (pattern) {\n\t\t\t\t\t\t\tvar easingComplete = (tween.easing || activeEasing)(percentComplete, 0, 1, property);\n\t\t\t\t\t\t\tvar best = 0;\n\t\t\t\t\t\t\tfor (var j = 0; j < sequence.length - 1; j++) {\n\t\t\t\t\t\t\t\tif (sequence[j].percent < easingComplete) {\n\t\t\t\t\t\t\t\t\tbest = j;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar tweenFrom = sequence[best],\n\t\t\t\t\t\t\t\ttweenTo = sequence[best + 1] || tweenFrom,\n\t\t\t\t\t\t\t\trawPercent = (percentComplete - tweenFrom.percent) / (tweenTo.percent - tweenFrom.percent),\n\t\t\t\t\t\t\t\ttweenPercent = reverse ? 1 - rawPercent : rawPercent,\n\t\t\t\t\t\t\t\teasing = tweenTo.easing || activeEasing || linearEasing;\n\t\t\t\t\t\t\tfor (; i < pattern.length; i++) {\n\t\t\t\t\t\t\t\tvar startValue = tweenFrom[i];\n\t\t\t\t\t\t\t\tif (startValue == null) {\n\t\t\t\t\t\t\t\t\tcurrentValue += pattern[i];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar endValue = tweenTo[i];\n\t\t\t\t\t\t\t\t\tif (startValue === endValue) {\n\t\t\t\t\t\t\t\t\t\tcurrentValue += startValue;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// All easings must deal with numbers except for our internal ones.\n\t\t\t\t\t\t\t\t\t\tvar result = easing(tweenPercent, startValue, endValue, property);\n\t\t\t\t\t\t\t\t\t\tcurrentValue += pattern[i] !== true ? result : Math.round(result);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (property !== "tween") {\n\t\t\t\t\t\t\t\tif (percentComplete === 1) {\n\t\t\t\t\t\t\t\t\tcurrentValue = removeNestedCalc(currentValue);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// TODO: To solve an IE<=8 positioning bug, the unit type must be dropped when setting a property value of 0 - add normalisations to legacy\n\t\t\t\t\t\t\t\tsetPropertyValue(activeCall.element, property, currentValue, tween.fn);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Skip the fake \'tween\' property as that is only\n\t\t\t\t\t\t\t\t// passed into the progress callback.\n\t\t\t\t\t\t\t\tactiveCall.tween = currentValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn("VelocityJS: Missing pattern:", property, JSON.stringify(tween[property]));\n\t\t\t\t\t\t\tdelete tweens[property];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (progressed.size || completed.size) {\n\t\t\t\t\tif (!document.hidden) {\n\t\t\t\t\t\tasyncCallbacks();\n\t\t\t\t\t} else if (worker) {\n\t\t\t\t\t\tworker.postMessage("");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetTimeout(asyncCallbacks, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (State.first) {\n\t\t\tState.isTicking = true;\n\t\t\tif (!document.hidden) {\n\t\t\t\trAFShim(tick);\n\t\t\t} else if (!worker) {\n\t\t\t\trAFProxy(tick);\n\t\t\t} else if (timestamp === false) {\n\t\t\t\t// Make sure we turn on the messages.\n\t\t\t\tworker.postMessage(true);\n\t\t\t}\n\t\t} else {\n\t\t\tState.isTicking = false;\n\t\t\tlastTick = 0;\n\t\t\tif (document.hidden && worker) {\n\t\t\t\t// Make sure we turn off the messages.\n\t\t\t\tworker.postMessage(false);\n\t\t\t}\n\t\t}\n\t\tticking = false;\n\t}\n\n\t// Project\n\t/**\n\t * Check if an animation should be finished, and if so we set the tweens to\n\t * the final value for it, then call complete.\n\t */\n\tfunction checkAnimationShouldBeFinished(animation, queueName, defaultQueue) {\n\t\tvalidateTweens(animation);\n\t\tif (queueName === undefined || queueName === getValue(animation.queue, animation.options.queue, defaultQueue)) {\n\t\t\tif (!(animation._flags & 4 /* STARTED */)) {\n\t\t\t\t// tslint:disable-line:no-bitwise\n\t\t\t\t// Copied from tick.ts - ensure that the animation is completely\n\t\t\t\t// valid and run begin() before complete().\n\t\t\t\tvar options = animation.options;\n\t\t\t\t// The begin callback is fired once per call, not once per\n\t\t\t\t// element, and is passed the full raw DOM element set as both\n\t\t\t\t// its context and its first argument.\n\t\t\t\tif (options._started++ === 0) {\n\t\t\t\t\toptions._first = animation;\n\t\t\t\t\tif (options.begin) {\n\t\t\t\t\t\t// Pass to an external fn with a try/catch block for optimisation\n\t\t\t\t\t\tbeginCall(animation);\n\t\t\t\t\t\t// Only called once, even if reversed or repeated\n\t\t\t\t\t\toptions.begin = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tanimation._flags |= 4 /* STARTED */; // tslint:disable-line:no-bitwise\n\t\t\t}\n\t\t\t// tslint:disable-next-line:forin\n\t\t\tfor (var property in animation.tweens) {\n\t\t\t\tvar tween = animation.tweens[property],\n\t\t\t\t\tsequence = tween.sequence,\n\t\t\t\t\tpattern = sequence.pattern;\n\t\t\t\tvar currentValue = "",\n\t\t\t\t\ti = 0;\n\t\t\t\tif (pattern) {\n\t\t\t\t\tvar endValues = sequence[sequence.length - 1];\n\t\t\t\t\tfor (; i < pattern.length; i++) {\n\t\t\t\t\t\tvar endValue = endValues[i];\n\t\t\t\t\t\tcurrentValue += endValue == null ? pattern[i] : endValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetPropertyValue(animation.element, property, currentValue, tween.fn);\n\t\t\t}\n\t\t\tcompleteCall(animation);\n\t\t}\n\t}\n\t/**\n\t * When the finish action is triggered, the elements\' currently active call is\n\t * immediately finished. When an element is finished, the next item in its\n\t * animation queue is immediately triggered. If passed via a chained call\n\t * then this will only target the animations in that call, and not the\n\t * elements linked to it.\n\t *\n\t * A queue name may be passed in to specify that only animations on the\n\t * named queue are finished. The default queue is named "". In addition the\n\t * value of `false` is allowed for the queue name.\n\t *\n\t * An final argument may be passed in to clear an element\'s remaining queued\n\t * calls. This may only be the value `true`.\n\t */\n\tfunction finish(args, elements, promiseHandler) {\n\t\tvar queueName = validateQueue(args[0], true),\n\t\t\tdefaultQueue = defaults$1.queue,\n\t\t\tfinishAll = args[queueName === undefined ? 0 : 1] === true;\n\t\tif (isVelocityResult(elements) && elements.velocity.animations) {\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = elements.velocity.animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar animation = _step.value;\n\n\t\t\t\t\tcheckAnimationShouldBeFinished(animation, queueName, defaultQueue);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\twhile (State.firstNew) {\n\t\t\t\tvalidateTweens(State.firstNew);\n\t\t\t}\n\t\t\tfor (var activeCall = State.first, nextCall; activeCall && (finishAll || activeCall !== State.firstNew); activeCall = nextCall || State.firstNew) {\n\t\t\t\tnextCall = activeCall._next;\n\t\t\t\tif (!elements || elements.includes(activeCall.element)) {\n\t\t\t\t\tcheckAnimationShouldBeFinished(activeCall, queueName, defaultQueue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (promiseHandler) {\n\t\t\tif (isVelocityResult(elements) && elements.velocity.animations && elements.then) {\n\t\t\t\telements.then(promiseHandler._resolver);\n\t\t\t} else {\n\t\t\t\tpromiseHandler._resolver(elements);\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["finish", finish], true);\n\n\t/**\n\t * Used to map getters for the various AnimationFlags.\n\t */\n\tvar animationFlags = {\n\t\tisExpanded: 1 /* EXPANDED */\n\t\t, isReady: 2 /* READY */\n\t\t, isStarted: 4 /* STARTED */\n\t\t, isStopped: 8 /* STOPPED */\n\t\t, isPaused: 16 /* PAUSED */\n\t\t, isSync: 32 /* SYNC */\n\t\t, isReverse: 64 /* REVERSE */\n\t};\n\t/**\n\t * Get or set an option or running AnimationCall data value. If there is no\n\t * value passed then it will get, otherwise we will set.\n\t *\n\t * NOTE: When using "get" this will not touch the Promise as it is never\n\t * returned to the user.\n\t */\n\tfunction option(args, elements, promiseHandler, action) {\n\t\tvar key = args[0],\n\t\t\tqueue = action.indexOf(".") >= 0 ? action.replace(/^.*\\./, "") : undefined,\n\t\t\tqueueName = queue === "false" ? false : validateQueue(queue, true);\n\t\tvar animations = void 0,\n\t\t\tvalue = args[1];\n\t\tif (!key) {\n\t\t\tconsole.warn("VelocityJS: Cannot access a non-existant key!");\n\t\t\treturn null;\n\t\t}\n\t\t// If we\'re chaining the return value from Velocity then we are only\n\t\t// interested in the values related to that call\n\t\tif (isVelocityResult(elements) && elements.velocity.animations) {\n\t\t\tanimations = elements.velocity.animations;\n\t\t} else {\n\t\t\tanimations = [];\n\t\t\tfor (var activeCall = State.first; activeCall; activeCall = activeCall._next) {\n\t\t\t\tif (elements.indexOf(activeCall.element) >= 0 && getValue(activeCall.queue, activeCall.options.queue) === queueName) {\n\t\t\t\t\tanimations.push(activeCall);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we\'re dealing with multiple elements that are pointing at a\n\t\t\t// single running animation, then instead treat them as a single\n\t\t\t// animation.\n\t\t\tif (elements.length > 1 && animations.length > 1) {\n\t\t\t\tvar i = 1,\n\t\t\t\t\toptions = animations[0].options;\n\t\t\t\twhile (i < animations.length) {\n\t\t\t\t\tif (animations[i++].options !== options) {\n\t\t\t\t\t\toptions = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO: this needs to check that they\'re actually a sync:true animation to merge the results, otherwise the individual values may be different\n\t\t\t\tif (options) {\n\t\t\t\t\tanimations = [animations[0]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// GET\n\t\tif (value === undefined) {\n\t\t\tvar result = [],\n\t\t\t\tflag = animationFlags[key];\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar animation = _step.value;\n\n\t\t\t\t\tif (flag === undefined) {\n\t\t\t\t\t\t// A normal key to get.\n\t\t\t\t\t\tresult.push(getValue(animation[key], animation.options[key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// A flag that we\'re checking against.\n\t\t\t\t\t\tresult.push((animation._flags & flag) === 0); // tslint:disable-line:no-bitwise\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (elements.length === 1 && animations.length === 1) {\n\t\t\t\t// If only a single animation is found and we\'re only targetting a\n\t\t\t\t// single element, then return the value directly\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\t// SET\n\t\tvar isPercentComplete = void 0;\n\t\tswitch (key) {\n\t\t\tcase "cache":\n\t\t\t\tvalue = validateCache(value);\n\t\t\t\tbreak;\n\t\t\tcase "begin":\n\t\t\t\tvalue = validateBegin(value);\n\t\t\t\tbreak;\n\t\t\tcase "complete":\n\t\t\t\tvalue = validateComplete(value);\n\t\t\t\tbreak;\n\t\t\tcase "delay":\n\t\t\t\tvalue = validateDelay(value);\n\t\t\t\tbreak;\n\t\t\tcase "duration":\n\t\t\t\tvalue = validateDuration(value);\n\t\t\t\tbreak;\n\t\t\tcase "fpsLimit":\n\t\t\t\tvalue = validateFpsLimit(value);\n\t\t\t\tbreak;\n\t\t\tcase "loop":\n\t\t\t\tvalue = validateLoop(value);\n\t\t\t\tbreak;\n\t\t\tcase "percentComplete":\n\t\t\t\tisPercentComplete = true;\n\t\t\t\tvalue = parseFloat(value);\n\t\t\t\tbreak;\n\t\t\tcase "repeat":\n\t\t\tcase "repeatAgain":\n\t\t\t\tvalue = validateRepeat(value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (key[0] !== "_") {\n\t\t\t\t\tvar num = parseFloat(value);\n\t\t\t\t\tif (value === String(num)) {\n\t\t\t\t\t\tvalue = num;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t// deliberate fallthrough\n\t\t\tcase "queue":\n\t\t\tcase "promise":\n\t\t\tcase "promiseRejectEmpty":\n\t\t\tcase "easing":\n\t\t\tcase "started":\n\t\t\t\tconsole.warn("VelocityJS: Trying to set a read-only key:", key);\n\t\t\t\treturn;\n\t\t}\n\t\tif (value === undefined || value !== value) {\n\t\t\tconsole.warn("VelocityJS: Trying to set an invalid value:" + key + "=" + value + " (" + args[1] + ")");\n\t\t\treturn null;\n\t\t}\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = animations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tvar _animation = _step2.value;\n\n\t\t\t\tif (isPercentComplete) {\n\t\t\t\t\t_animation.timeStart = lastTick - getValue(_animation.duration, _animation.options.duration, defaults$1.duration) * value;\n\t\t\t\t} else {\n\t\t\t\t\t_animation[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (promiseHandler) {\n\t\t\tif (isVelocityResult(elements) && elements.velocity.animations && elements.then) {\n\t\t\t\telements.then(promiseHandler._resolver);\n\t\t\t} else {\n\t\t\t\tpromiseHandler._resolver(elements);\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["option", option], true);\n\n\t// Project\n\t/**\n\t * Check if an animation should be paused / resumed.\n\t */\n\tfunction checkAnimation(animation, queueName, defaultQueue, isPaused) {\n\t\tif (queueName === undefined || queueName === getValue(animation.queue, animation.options.queue, defaultQueue)) {\n\t\t\tif (isPaused) {\n\t\t\t\tanimation._flags |= 16 /* PAUSED */; // tslint:disable-line:no-bitwise\n\t\t\t} else {\n\t\t\t\tanimation._flags &= ~16 /* PAUSED */; // tslint:disable-line:no-bitwise\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Pause and Resume are call-wide (not on a per element basis). Thus, calling pause or resume on a\n\t * single element will cause any calls that contain tweens for that element to be paused/resumed\n\t * as well.\n\t */\n\tfunction pauseResume(args, elements, promiseHandler, action) {\n\t\tvar isPaused = action.indexOf("pause") === 0,\n\t\t\tqueue = action.indexOf(".") >= 0 ? action.replace(/^.*\\./, "") : undefined,\n\t\t\tqueueName = queue === "false" ? false : validateQueue(args[0]),\n\t\t\tdefaultQueue = defaults$1.queue;\n\t\tif (isVelocityResult(elements) && elements.velocity.animations) {\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = elements.velocity.animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar animation = _step.value;\n\n\t\t\t\t\tcheckAnimation(animation, queueName, defaultQueue, isPaused);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar activeCall = State.first;\n\t\t\twhile (activeCall) {\n\t\t\t\tif (!elements || elements.includes(activeCall.element)) {\n\t\t\t\t\tcheckAnimation(activeCall, queueName, defaultQueue, isPaused);\n\t\t\t\t}\n\t\t\t\tactiveCall = activeCall._next;\n\t\t\t}\n\t\t}\n\t\tif (promiseHandler) {\n\t\t\tif (isVelocityResult(elements) && elements.velocity.animations && elements.then) {\n\t\t\t\telements.then(promiseHandler._resolver);\n\t\t\t} else {\n\t\t\t\tpromiseHandler._resolver(elements);\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["pause", pauseResume], true);\n\tregisterAction(["resume", pauseResume], true);\n\n\t// Project\n\t/**\n\t * Get or set a style of Nomralised property value on one or more elements.\n\t * If there is no value passed then it will get, otherwise we will set.\n\t *\n\t * NOTE: When using "get" this will not touch the Promise as it is never\n\t * returned to the user.\n\t *\n\t * This can fail to set, and will reject the Promise if it does so.\n\t *\n\t * Velocity(elements, "style", "property", "value") => elements;\n\t * Velocity(elements, "style", {"property": "value", ...}) => elements;\n\t * Velocity(element, "style", "property") => "value";\n\t * Velocity(elements, "style", "property") => ["value", ...];\n\t */\n\tfunction propertyAction(args, elements, promiseHandler, action) {\n\t\tvar property = args[0],\n\t\t\tvalue = args[1];\n\t\tif (!property) {\n\t\t\tconsole.warn("VelocityJS: Cannot access a non-existant property!");\n\t\t\treturn null;\n\t\t}\n\t\t// GET\n\t\tif (value === undefined && !isPlainObject(property)) {\n\t\t\tif (Array.isArray(property)) {\n\t\t\t\tif (elements.length === 1) {\n\t\t\t\t\tvar result = {};\n\t\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\t\tvar _didIteratorError = false;\n\t\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator = property[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\t\tvar prop = _step.value;\n\n\t\t\t\t\t\t\tresult[prop] = fixColors(getPropertyValue(elements[0], prop));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t\t_iteratorError = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\tvar _result = [];\n\t\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\t\tvar element = _step2.value;\n\n\t\t\t\t\t\t\tvar res = {};\n\t\t\t\t\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\t\t\t\t\tvar _didIteratorError3 = false;\n\t\t\t\t\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (var _iterator3 = property[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\t\t\t\t\tvar _prop = _step3.value;\n\n\t\t\t\t\t\t\t\t\tres[_prop] = fixColors(getPropertyValue(element, _prop));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t\t\t\t\t_iteratorError3 = err;\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_result.push(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn _result;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If only a single animation is found and we\'re only targetting a\n\t\t\t\t// single element, then return the value directly\n\t\t\t\tif (elements.length === 1) {\n\t\t\t\t\treturn fixColors(getPropertyValue(elements[0], property));\n\t\t\t\t}\n\t\t\t\tvar _result2 = [];\n\t\t\t\tvar _iteratorNormalCompletion4 = true;\n\t\t\t\tvar _didIteratorError4 = false;\n\t\t\t\tvar _iteratorError4 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator4 = elements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\t\t\t\tvar _element = _step4.value;\n\n\t\t\t\t\t\t_result2.push(fixColors(getPropertyValue(_element, property)));\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError4 = true;\n\t\t\t\t\t_iteratorError4 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t\t\t\t_iterator4.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError4) {\n\t\t\t\t\t\t\tthrow _iteratorError4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn _result2;\n\t\t\t}\n\t\t}\n\t\t// SET\n\t\tvar error = [];\n\t\tif (isPlainObject(property)) {\n\t\t\tfor (var propertyName in property) {\n\t\t\t\tif (property.hasOwnProperty(propertyName)) {\n\t\t\t\t\tvar _iteratorNormalCompletion5 = true;\n\t\t\t\t\tvar _didIteratorError5 = false;\n\t\t\t\t\tvar _iteratorError5 = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator5 = elements[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t\t\t\t\t\t\tvar _element2 = _step5.value;\n\n\t\t\t\t\t\t\tvar propertyValue = property[propertyName];\n\t\t\t\t\t\t\tif (isString(propertyValue) || isNumber(propertyValue)) {\n\t\t\t\t\t\t\t\tsetPropertyValue(_element2, propertyName, property[propertyName]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\terror.push("Cannot set a property \\"" + propertyName + "\\" to an unknown type: " + (typeof propertyValue === "undefined" ? "undefined" : _typeof(propertyValue)));\n\t\t\t\t\t\t\t\tconsole.warn("VelocityJS: Cannot set a property \\"" + propertyName + "\\" to an unknown type:", propertyValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError5 = true;\n\t\t\t\t\t\t_iteratorError5 = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t\t\t\t\t\t\t\t_iterator5.return();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError5) {\n\t\t\t\t\t\t\t\tthrow _iteratorError5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isString(value) || isNumber(value)) {\n\t\t\tvar _iteratorNormalCompletion6 = true;\n\t\t\tvar _didIteratorError6 = false;\n\t\t\tvar _iteratorError6 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator6 = elements[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n\t\t\t\t\tvar _element3 = _step6.value;\n\n\t\t\t\t\tsetPropertyValue(_element3, property, String(value));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError6 = true;\n\t\t\t\t_iteratorError6 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion6 && _iterator6.return) {\n\t\t\t\t\t\t_iterator6.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError6) {\n\t\t\t\t\t\tthrow _iteratorError6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\terror.push("Cannot set a property \\"" + property + "\\" to an unknown type: " + (typeof value === "undefined" ? "undefined" : _typeof(value)));\n\t\t\tconsole.warn("VelocityJS: Cannot set a property \\"" + property + "\\" to an unknown type:", value);\n\t\t}\n\t\tif (promiseHandler) {\n\t\t\tif (error.length) {\n\t\t\t\tpromiseHandler._rejecter(error.join(", "));\n\t\t\t} else if (isVelocityResult(elements) && elements.velocity.animations && elements.then) {\n\t\t\t\telements.then(promiseHandler._resolver);\n\t\t\t} else {\n\t\t\t\tpromiseHandler._resolver(elements);\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["property", propertyAction], true);\n\n\t// Project\n\tregisterAction(["reverse", function (args, elements, promiseHandler, action) {\n\t\t// NOTE: Code needs to split out before here - but this is needed to prevent it being overridden\n\t\tthrow new SyntaxError("VelocityJS: The \'reverse\' action is built in and private.");\n\t}], true);\n\n\t// Project\n\t/**\n\t * Check if an animation should be stopped, and if so then set the STOPPED\n\t * flag on it, then call complete.\n\t */\n\tfunction checkAnimationShouldBeStopped(animation, queueName, defaultQueue) {\n\t\tvalidateTweens(animation);\n\t\tif (queueName === undefined || queueName === getValue(animation.queue, animation.options.queue, defaultQueue)) {\n\t\t\tanimation._flags |= 8 /* STOPPED */; // tslint:disable-line:no-bitwise\n\t\t\tcompleteCall(animation);\n\t\t}\n\t}\n\t/**\n\t * When the stop action is triggered, the elements\' currently active call is\n\t * immediately stopped. When an element is stopped, the next item in its\n\t * animation queue is immediately triggered. If passed via a chained call\n\t * then this will only target the animations in that call, and not the\n\t * elements linked to it.\n\t *\n\t * A queue name may be passed in to specify that only animations on the\n\t * named queue are stopped. The default queue is named "". In addition the\n\t * value of `false` is allowed for the queue name.\n\t *\n\t * An final argument may be passed in to clear an element\'s remaining queued\n\t * calls. This may only be the value `true`.\n\t *\n\t * Note: The stop command runs prior to Velocity\'s Queueing phase since its\n\t * behavior is intended to take effect *immediately*, regardless of the\n\t * element\'s current queue state.\n\t */\n\tfunction stop(args, elements, promiseHandler, action) {\n\t\tvar queueName = validateQueue(args[0], true),\n\t\t\tdefaultQueue = defaults$1.queue,\n\t\t\tfinishAll = args[queueName === undefined ? 0 : 1] === true;\n\t\tif (isVelocityResult(elements) && elements.velocity.animations) {\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = elements.velocity.animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar animation = _step.value;\n\n\t\t\t\t\tcheckAnimationShouldBeStopped(animation, queueName, defaultQueue);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\twhile (State.firstNew) {\n\t\t\t\tvalidateTweens(State.firstNew);\n\t\t\t}\n\t\t\tfor (var activeCall = State.first, nextCall; activeCall && (finishAll || activeCall !== State.firstNew); activeCall = nextCall || State.firstNew) {\n\t\t\t\tnextCall = activeCall._next;\n\t\t\t\tif (!elements || elements.includes(activeCall.element)) {\n\t\t\t\t\tcheckAnimationShouldBeStopped(activeCall, queueName, defaultQueue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (promiseHandler) {\n\t\t\tif (isVelocityResult(elements) && elements.velocity.animations && elements.then) {\n\t\t\t\telements.then(promiseHandler._resolver);\n\t\t\t} else {\n\t\t\t\tpromiseHandler._resolver(elements);\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["stop", stop], true);\n\n\t// Project\n\tregisterAction(["style", propertyAction], true);\n\n\t// Project\n\t/**\n\t *\n\t */\n\tfunction tweenAction(args, elements, promiseHandler, action) {\n\t\tvar requireForcefeeding = void 0;\n\t\tif (!elements) {\n\t\t\tif (!args.length) {\n\t\t\t\tconsole.info("Velocity(<element>, \\"tween\\", percentComplete, property, end | [end, <easing>, <start>], <easing>) => value\\nVelocity(<element>, \\"tween\\", percentComplete, {property: end | [end, <easing>, <start>], ...}, <easing>) => {property: value, ...}");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telements = [document.body];\n\t\t\trequireForcefeeding = true;\n\t\t} else if (elements.length !== 1) {\n\t\t\t// TODO: Allow more than a single element to return an array of results\n\t\t\tthrow new Error("VelocityJS: Cannot tween more than one element!");\n\t\t}\n\t\tvar percentComplete = args[0],\n\t\t\tfakeAnimation = {\n\t\t\t\telements: elements,\n\t\t\t\telement: elements[0],\n\t\t\t\tqueue: false,\n\t\t\t\toptions: {\n\t\t\t\t\tduration: 1000\n\t\t\t\t},\n\t\t\t\ttweens: null\n\t\t\t},\n\t\t\tresult = {};\n\t\tvar properties = args[1],\n\t\t\tsingleResult = void 0,\n\t\t\tmaybeSequence = void 0,\n\t\t\teasing = args[2],\n\t\t\tcount = 0;\n\t\tif (isString(args[1])) {\n\t\t\tif (SequencesObject && SequencesObject[args[1]]) {\n\t\t\t\tmaybeSequence = SequencesObject[args[1]];\n\t\t\t\tproperties = {};\n\t\t\t\teasing = args[2];\n\t\t\t} else {\n\t\t\t\tsingleResult = true;\n\t\t\t\tproperties = defineProperty({}, args[1], args[2]);\n\t\t\t\teasing = args[3];\n\t\t\t}\n\t\t} else if (Array.isArray(args[1])) {\n\t\t\tsingleResult = true;\n\t\t\tproperties = {\n\t\t\t\ttween: args[1]\n\t\t\t};\n\t\t\teasing = args[2];\n\t\t}\n\t\tif (!isNumber(percentComplete) || percentComplete < 0 || percentComplete > 1) {\n\t\t\tthrow new Error("VelocityJS: Must tween a percentage from 0 to 1!");\n\t\t}\n\t\tif (!isPlainObject(properties)) {\n\t\t\tthrow new Error("VelocityJS: Cannot tween an invalid property!");\n\t\t}\n\t\tif (requireForcefeeding) {\n\t\t\tfor (var property in properties) {\n\t\t\t\tif (properties.hasOwnProperty(property) && (!Array.isArray(properties[property]) || properties[property].length < 2)) {\n\t\t\t\t\tthrow new Error("VelocityJS: When not supplying an element you must force-feed values: " + property);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar activeEasing = validateEasing(getValue(easing, defaults$1.easing), DEFAULT_DURATION);\n\t\tif (maybeSequence) {\n\t\t\texpandSequence(fakeAnimation, maybeSequence);\n\t\t} else {\n\t\t\texpandProperties(fakeAnimation, properties);\n\t\t}\n\t\t// tslint:disable-next-line:forin\n\t\tfor (var _property in fakeAnimation.tweens) {\n\t\t\t// For every element, iterate through each property.\n\t\t\tvar propertyTween = fakeAnimation.tweens[_property],\n\t\t\t\tsequence = propertyTween.sequence,\n\t\t\t\tpattern = sequence.pattern;\n\t\t\tvar currentValue = "",\n\t\t\t\ti = 0;\n\t\t\tcount++;\n\t\t\tif (pattern) {\n\t\t\t\tvar easingComplete = (propertyTween.easing || activeEasing)(percentComplete, 0, 1, _property);\n\t\t\t\tvar best = 0;\n\t\t\t\tfor (var j = 0; j < sequence.length - 1; j++) {\n\t\t\t\t\tif (sequence[j].percent < easingComplete) {\n\t\t\t\t\t\tbest = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar tweenFrom = sequence[best],\n\t\t\t\t\ttweenTo = sequence[best + 1] || tweenFrom,\n\t\t\t\t\ttweenPercent = (percentComplete - tweenFrom.percent) / (tweenTo.percent - tweenFrom.percent),\n\t\t\t\t\ttweenEasing = tweenTo.easing || linearEasing;\n\t\t\t\tfor (; i < pattern.length; i++) {\n\t\t\t\t\tvar startValue = tweenFrom[i];\n\t\t\t\t\tif (startValue == null) {\n\t\t\t\t\t\tcurrentValue += pattern[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar endValue = tweenTo[i];\n\t\t\t\t\t\tif (startValue === endValue) {\n\t\t\t\t\t\t\tcurrentValue += startValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// All easings must deal with numbers except for our internal ones.\n\t\t\t\t\t\t\tvar value = tweenEasing(tweenPercent, startValue, endValue, _property);\n\t\t\t\t\t\t\tcurrentValue += pattern[i] === true ? Math.round(value) : value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult[_property] = currentValue;\n\t\t\t}\n\t\t}\n\t\tif (singleResult && count === 1) {\n\t\t\tfor (var _property2 in result) {\n\t\t\t\tif (result.hasOwnProperty(_property2)) {\n\t\t\t\t\treturn result[_property2];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tregisterAction(["tween", tweenAction], true);\n\n\t// Project\n\t/**\n\t * Converting from hex as it makes for a smaller file.\n\t */\n\tvar colorValues = {\n\t\taliceblue: 0xF0F8FF,\n\t\tantiquewhite: 0xFAEBD7,\n\t\taqua: 0x00FFFF,\n\t\taquamarine: 0x7FFFD4,\n\t\tazure: 0xF0FFFF,\n\t\tbeige: 0xF5F5DC,\n\t\tbisque: 0xFFE4C4,\n\t\tblack: 0x000000,\n\t\tblanchedalmond: 0xFFEBCD,\n\t\tblue: 0x0000FF,\n\t\tblueviolet: 0x8A2BE2,\n\t\tbrown: 0xA52A2A,\n\t\tburlywood: 0xDEB887,\n\t\tcadetblue: 0x5F9EA0,\n\t\tchartreuse: 0x7FFF00,\n\t\tchocolate: 0xD2691E,\n\t\tcoral: 0xFF7F50,\n\t\tcornflowerblue: 0x6495ED,\n\t\tcornsilk: 0xFFF8DC,\n\t\tcrimson: 0xDC143C,\n\t\tcyan: 0x00FFFF,\n\t\tdarkblue: 0x00008B,\n\t\tdarkcyan: 0x008B8B,\n\t\tdarkgoldenrod: 0xB8860B,\n\t\tdarkgray: 0xA9A9A9,\n\t\tdarkgrey: 0xA9A9A9,\n\t\tdarkgreen: 0x006400,\n\t\tdarkkhaki: 0xBDB76B,\n\t\tdarkmagenta: 0x8B008B,\n\t\tdarkolivegreen: 0x556B2F,\n\t\tdarkorange: 0xFF8C00,\n\t\tdarkorchid: 0x9932CC,\n\t\tdarkred: 0x8B0000,\n\t\tdarksalmon: 0xE9967A,\n\t\tdarkseagreen: 0x8FBC8F,\n\t\tdarkslateblue: 0x483D8B,\n\t\tdarkslategray: 0x2F4F4F,\n\t\tdarkslategrey: 0x2F4F4F,\n\t\tdarkturquoise: 0x00CED1,\n\t\tdarkviolet: 0x9400D3,\n\t\tdeeppink: 0xFF1493,\n\t\tdeepskyblue: 0x00BFFF,\n\t\tdimgray: 0x696969,\n\t\tdimgrey: 0x696969,\n\t\tdodgerblue: 0x1E90FF,\n\t\tfirebrick: 0xB22222,\n\t\tfloralwhite: 0xFFFAF0,\n\t\tforestgreen: 0x228B22,\n\t\tfuchsia: 0xFF00FF,\n\t\tgainsboro: 0xDCDCDC,\n\t\tghostwhite: 0xF8F8FF,\n\t\tgold: 0xFFD700,\n\t\tgoldenrod: 0xDAA520,\n\t\tgray: 0x808080,\n\t\tgrey: 0x808080,\n\t\tgreen: 0x008000,\n\t\tgreenyellow: 0xADFF2F,\n\t\thoneydew: 0xF0FFF0,\n\t\thotpink: 0xFF69B4,\n\t\tindianred: 0xCD5C5C,\n\t\tindigo: 0x4B0082,\n\t\tivory: 0xFFFFF0,\n\t\tkhaki: 0xF0E68C,\n\t\tlavender: 0xE6E6FA,\n\t\tlavenderblush: 0xFFF0F5,\n\t\tlawngreen: 0x7CFC00,\n\t\tlemonchiffon: 0xFFFACD,\n\t\tlightblue: 0xADD8E6,\n\t\tlightcoral: 0xF08080,\n\t\tlightcyan: 0xE0FFFF,\n\t\tlightgoldenrodyellow: 0xFAFAD2,\n\t\tlightgray: 0xD3D3D3,\n\t\tlightgrey: 0xD3D3D3,\n\t\tlightgreen: 0x90EE90,\n\t\tlightpink: 0xFFB6C1,\n\t\tlightsalmon: 0xFFA07A,\n\t\tlightseagreen: 0x20B2AA,\n\t\tlightskyblue: 0x87CEFA,\n\t\tlightslategray: 0x778899,\n\t\tlightslategrey: 0x778899,\n\t\tlightsteelblue: 0xB0C4DE,\n\t\tlightyellow: 0xFFFFE0,\n\t\tlime: 0x00FF00,\n\t\tlimegreen: 0x32CD32,\n\t\tlinen: 0xFAF0E6,\n\t\tmagenta: 0xFF00FF,\n\t\tmaroon: 0x800000,\n\t\tmediumaquamarine: 0x66CDAA,\n\t\tmediumblue: 0x0000CD,\n\t\tmediumorchid: 0xBA55D3,\n\t\tmediumpurple: 0x9370DB,\n\t\tmediumseagreen: 0x3CB371,\n\t\tmediumslateblue: 0x7B68EE,\n\t\tmediumspringgreen: 0x00FA9A,\n\t\tmediumturquoise: 0x48D1CC,\n\t\tmediumvioletred: 0xC71585,\n\t\tmidnightblue: 0x191970,\n\t\tmintcream: 0xF5FFFA,\n\t\tmistyrose: 0xFFE4E1,\n\t\tmoccasin: 0xFFE4B5,\n\t\tnavajowhite: 0xFFDEAD,\n\t\tnavy: 0x000080,\n\t\toldlace: 0xFDF5E6,\n\t\tolive: 0x808000,\n\t\tolivedrab: 0x6B8E23,\n\t\torange: 0xFFA500,\n\t\torangered: 0xFF4500,\n\t\torchid: 0xDA70D6,\n\t\tpalegoldenrod: 0xEEE8AA,\n\t\tpalegreen: 0x98FB98,\n\t\tpaleturquoise: 0xAFEEEE,\n\t\tpalevioletred: 0xDB7093,\n\t\tpapayawhip: 0xFFEFD5,\n\t\tpeachpuff: 0xFFDAB9,\n\t\tperu: 0xCD853F,\n\t\tpink: 0xFFC0CB,\n\t\tplum: 0xDDA0DD,\n\t\tpowderblue: 0xB0E0E6,\n\t\tpurple: 0x800080,\n\t\trebeccapurple: 0x663399,\n\t\tred: 0xFF0000,\n\t\trosybrown: 0xBC8F8F,\n\t\troyalblue: 0x4169E1,\n\t\tsaddlebrown: 0x8B4513,\n\t\tsalmon: 0xFA8072,\n\t\tsandybrown: 0xF4A460,\n\t\tseagreen: 0x2E8B57,\n\t\tseashell: 0xFFF5EE,\n\t\tsienna: 0xA0522D,\n\t\tsilver: 0xC0C0C0,\n\t\tskyblue: 0x87CEEB,\n\t\tslateblue: 0x6A5ACD,\n\t\tslategray: 0x708090,\n\t\tslategrey: 0x708090,\n\t\tsnow: 0xFFFAFA,\n\t\tspringgreen: 0x00FF7F,\n\t\tsteelblue: 0x4682B4,\n\t\ttan: 0xD2B48C,\n\t\tteal: 0x008080,\n\t\tthistle: 0xD8BFD8,\n\t\ttomato: 0xFF6347,\n\t\tturquoise: 0x40E0D0,\n\t\tviolet: 0xEE82EE,\n\t\twheat: 0xF5DEB3,\n\t\twhite: 0xFFFFFF,\n\t\twhitesmoke: 0xF5F5F5,\n\t\tyellow: 0xFFFF00,\n\t\tyellowgreen: 0x9ACD32\n\t};\n\tfor (var name in colorValues) {\n\t\tif (colorValues.hasOwnProperty(name)) {\n\t\t\tvar color = colorValues[name];\n\t\t\tColorNames[name] = Math.floor(color / 65536) + "," + Math.floor(color / 256 % 256) + "," + color % 256;\n\t\t}\n\t}\n\n\t// Project\n\tfunction registerBackIn(name, amount) {\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn Math.pow(percentComplete, 2) * ((amount + 1) * percentComplete - amount) * (endValue - startValue);\n\t\t}]);\n\t}\n\tfunction registerBackOut(name, amount) {\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn (Math.pow(--percentComplete, 2) * ((amount + 1) * percentComplete + amount) + 1) * (endValue - startValue);\n\t\t}]);\n\t}\n\tfunction registerBackInOut(name, amount) {\n\t\tamount *= 1.525;\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\tpercentComplete *= 2;\n\t\t\treturn (percentComplete < 1 ? Math.pow(percentComplete, 2) * ((amount + 1) * percentComplete - amount) : Math.pow(percentComplete - 2, 2) * ((amount + 1) * (percentComplete - 2) + amount) + 2) * 0.5 * (endValue - startValue);\n\t\t}]);\n\t}\n\tregisterBackIn("easeInBack", 1.7);\n\tregisterBackOut("easeOutBack", 1.7);\n\tregisterBackInOut("easeInOutBack", 1.7);\n\t// TODO: Expose these as actions to register custom easings?\n\n\t// Project\n\tfunction easeOutBouncePercent(percentComplete) {\n\t\tif (percentComplete < 1 / 2.75) {\n\t\t\treturn 7.5625 * percentComplete * percentComplete;\n\t\t}\n\t\tif (percentComplete < 2 / 2.75) {\n\t\t\treturn 7.5625 * (percentComplete -= 1.5 / 2.75) * percentComplete + 0.75;\n\t\t}\n\t\tif (percentComplete < 2.5 / 2.75) {\n\t\t\treturn 7.5625 * (percentComplete -= 2.25 / 2.75) * percentComplete + 0.9375;\n\t\t}\n\t\treturn 7.5625 * (percentComplete -= 2.625 / 2.75) * percentComplete + 0.984375;\n\t}\n\tfunction easeInBouncePercent(percentComplete) {\n\t\treturn 1 - easeOutBouncePercent(1 - percentComplete);\n\t}\n\tfunction easeInBounce(percentComplete, startValue, endValue) {\n\t\tif (percentComplete === 0) {\n\t\t\treturn startValue;\n\t\t}\n\t\tif (percentComplete === 1) {\n\t\t\treturn endValue;\n\t\t}\n\t\treturn easeInBouncePercent(percentComplete) * (endValue - startValue);\n\t}\n\tfunction easeOutBounce(percentComplete, startValue, endValue) {\n\t\tif (percentComplete === 0) {\n\t\t\treturn startValue;\n\t\t}\n\t\tif (percentComplete === 1) {\n\t\t\treturn endValue;\n\t\t}\n\t\treturn easeOutBouncePercent(percentComplete) * (endValue - startValue);\n\t}\n\tfunction easeInOutBounce(percentComplete, startValue, endValue) {\n\t\tif (percentComplete === 0) {\n\t\t\treturn startValue;\n\t\t}\n\t\tif (percentComplete === 1) {\n\t\t\treturn endValue;\n\t\t}\n\t\treturn (percentComplete < 0.5 ? easeInBouncePercent(percentComplete * 2) * 0.5 : easeOutBouncePercent(percentComplete * 2 - 1) * 0.5 + 0.5) * (endValue - startValue);\n\t}\n\tregisterEasing(["easeInBounce", easeInBounce]);\n\tregisterEasing(["easeOutBounce", easeOutBounce]);\n\tregisterEasing(["easeInOutBounce", easeInOutBounce]);\n\n\t// Project\n\t// Constants\n\tvar PI2 = Math.PI * 2;\n\tfunction registerElasticIn(name, amplitude, period) {\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn -(amplitude * Math.pow(2, 10 * (percentComplete -= 1)) * Math.sin((percentComplete - period / PI2 * Math.asin(1 / amplitude)) * PI2 / period)) * (endValue - startValue);\n\t\t}]);\n\t}\n\tfunction registerElasticOut(name, amplitude, period) {\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\treturn (amplitude * Math.pow(2, -10 * percentComplete) * Math.sin((percentComplete - period / PI2 * Math.asin(1 / amplitude)) * PI2 / period) + 1) * (endValue - startValue);\n\t\t}]);\n\t}\n\tfunction registerElasticInOut(name, amplitude, period) {\n\t\tregisterEasing([name, function (percentComplete, startValue, endValue) {\n\t\t\tif (percentComplete === 0) {\n\t\t\t\treturn startValue;\n\t\t\t}\n\t\t\tif (percentComplete === 1) {\n\t\t\t\treturn endValue;\n\t\t\t}\n\t\t\tvar s = period / PI2 * Math.asin(1 / amplitude);\n\t\t\tpercentComplete = percentComplete * 2 - 1;\n\t\t\treturn (percentComplete < 0 ? -0.5 * (amplitude * Math.pow(2, 10 * percentComplete) * Math.sin((percentComplete - s) * PI2 / period)) : amplitude * Math.pow(2, -10 * percentComplete) * Math.sin((percentComplete - s) * PI2 / period) * 0.5 + 1) * (endValue - startValue);\n\t\t}]);\n\t}\n\tregisterElasticIn("easeInElastic", 1, 0.3);\n\tregisterElasticOut("easeOutElastic", 1, 0.3);\n\tregisterElasticInOut("easeInOutElastic", 1, 0.3 * 1.5);\n\t// TODO: Expose these as actions to register custom easings?\n\n\t// Project\n\t/**\n\t * Easing function that sets to the specified value immediately after the\n\t * animation starts.\n\t */\n\tfunction atStart(percentComplete, startValue, endValue) {\n\t\treturn percentComplete === 0 ? startValue : endValue;\n\t}\n\t/**\n\t * Easing function that sets to the specified value while the animation is\n\t * running.\n\t */\n\tfunction during(percentComplete, startValue, endValue) {\n\t\treturn percentComplete === 0 || percentComplete === 1 ? startValue : endValue;\n\t}\n\t/**\n\t * Easing function that sets to the specified value when the animation ends.\n\t */\n\tfunction atEnd(percentComplete, startValue, endValue) {\n\t\treturn percentComplete === 1 ? endValue : startValue;\n\t}\n\tregisterEasing(["at-start", atStart]);\n\tregisterEasing(["during", during]);\n\tregisterEasing(["at-end", atEnd]);\n\n\t// Project\n\t/**\n\t * Get/set the inner/outer dimension.\n\t */\n\tfunction getDimension(name, wantInner) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue === undefined) {\n\t\t\t\treturn augmentDimension(element, name, wantInner) + "px";\n\t\t\t}\n\t\t\tsetPropertyValue(element, name, parseFloat(propertyValue) - augmentDimension(element, name, wantInner) + "px");\n\t\t};\n\t}\n\tregisterNormalization(["Element", "innerWidth", getDimension("width", true)]);\n\tregisterNormalization(["Element", "innerHeight", getDimension("height", true)]);\n\tregisterNormalization(["Element", "outerWidth", getDimension("width", false)]);\n\tregisterNormalization(["Element", "outerHeight", getDimension("height", false)]);\n\n\t// Project\n\t// Constants\n\tvar inlineRx = /^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|let|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i,\n\t\tlistItemRx = /^(li)$/i,\n\t\ttableRowRx = /^(tr)$/i,\n\t\ttableRx = /^(table)$/i,\n\t\ttableRowGroupRx = /^(tbody)$/i;\n\tfunction display(element, propertyValue) {\n\t\tvar style = element.style;\n\t\tif (propertyValue === undefined) {\n\t\t\treturn computePropertyValue(element, "display");\n\t\t}\n\t\tif (propertyValue === "auto") {\n\t\t\tvar nodeName = element && element.nodeName,\n\t\t\t\tdata = Data(element);\n\t\t\tif (inlineRx.test(nodeName)) {\n\t\t\t\tpropertyValue = "inline";\n\t\t\t} else if (listItemRx.test(nodeName)) {\n\t\t\t\tpropertyValue = "list-item";\n\t\t\t} else if (tableRowRx.test(nodeName)) {\n\t\t\t\tpropertyValue = "table-row";\n\t\t\t} else if (tableRx.test(nodeName)) {\n\t\t\t\tpropertyValue = "table";\n\t\t\t} else if (tableRowGroupRx.test(nodeName)) {\n\t\t\t\tpropertyValue = "table-row-group";\n\t\t\t} else {\n\t\t\t\t// Default to "block" when no match is found.\n\t\t\t\tpropertyValue = "block";\n\t\t\t}\n\t\t\t// IMPORTANT: We need to do this as getPropertyValue bypasses the\n\t\t\t// Normalisation when it exists in the cache.\n\t\t\tdata.cache["display"] = propertyValue;\n\t\t}\n\t\tstyle.display = propertyValue;\n\t}\n\tregisterNormalization(["Element", "display", display]);\n\n\t// Project\n\tfunction clientWidth(element, propertyValue) {\n\t\tif (propertyValue == null) {\n\t\t\treturn element.clientWidth + "px";\n\t\t}\n\t}\n\tfunction scrollWidth(element, propertyValue) {\n\t\tif (propertyValue == null) {\n\t\t\treturn element.scrollWidth + "px";\n\t\t}\n\t}\n\tfunction clientHeight(element, propertyValue) {\n\t\tif (propertyValue == null) {\n\t\t\treturn element.clientHeight + "px";\n\t\t}\n\t}\n\tfunction scrollHeight(element, propertyValue) {\n\t\tif (propertyValue == null) {\n\t\t\treturn element.scrollHeight + "px";\n\t\t}\n\t}\n\tfunction scroll(direction, end) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue == null) {\n\t\t\t\t// Make sure we have these values cached.\n\t\t\t\tgetPropertyValue(element, "client" + direction, null, true);\n\t\t\t\tgetPropertyValue(element, "scroll" + direction, null, true);\n\t\t\t\treturn element["scroll" + end] + "px";\n\t\t\t}\n\t\t\tvar value = parseFloat(propertyValue),\n\t\t\t\tunit = propertyValue.replace(String(value), "");\n\t\t\tswitch (unit) {\n\t\t\t\tcase "":\n\t\t\t\tcase "px":\n\t\t\t\t\telement["scroll" + end] = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase "%":\n\t\t\t\t\tvar client = parseFloat(getPropertyValue(element, "client" + direction)),\n\t\t\t\t\t\tscrollValue = parseFloat(getPropertyValue(element, "scroll" + direction));\n\t\t\t\t\telement["scroll" + end] = Math.max(0, scrollValue - client) * value / 100;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\tregisterNormalization(["HTMLElement", "scroll", scroll("Height", "Top"), false]);\n\tregisterNormalization(["HTMLElement", "scrollTop", scroll("Height", "Top"), false]);\n\tregisterNormalization(["HTMLElement", "scrollLeft", scroll("Width", "Left"), false]);\n\tregisterNormalization(["HTMLElement", "scrollWidth", scrollWidth]);\n\tregisterNormalization(["HTMLElement", "clientWidth", clientWidth]);\n\tregisterNormalization(["HTMLElement", "scrollHeight", scrollHeight]);\n\tregisterNormalization(["HTMLElement", "clientHeight", clientHeight]);\n\n\t// Project\n\t/**\n\t * An RegExp pattern for the following list of css words using\n\t * http://kemio.com.ar/tools/lst-trie-re.php to generate:\n\t *\n\t * blockSize\n\t * borderBottomLeftRadius\n\t * borderBottomRightRadius\n\t * borderBottomWidth\n\t * borderImageOutset\n\t * borderImageWidth\n\t * borderLeftWidth\n\t * borderRadius\n\t * borderRightWidth\n\t * borderSpacing\n\t * borderTopLeftRadius\n\t * borderTopRightRadius\n\t * borderTopWidth\n\t * borderWidth\n\t * bottom\n\t * columnGap\n\t * columnRuleWidth\n\t * columnWidth\n\t * flexBasis\n\t * fontSize\n\t * gridColumnGap\n\t * gridGap\n\t * gridRowGap\n\t * height\n\t * inlineSize\n\t * left\n\t * letterSpacing\n\t * margin\n\t * marginBottom\n\t * marginLeft\n\t * marginRight\n\t * marginTop\n\t * maxBlockSize\n\t * maxHeight\n\t * maxInlineSize\n\t * maxWidth\n\t * minBlockSize\n\t * minHeight\n\t * minInlineSize\n\t * minWidth\n\t * objectPosition\n\t * outlineOffset\n\t * outlineWidth\n\t * padding\n\t * paddingBottom\n\t * paddingLeft\n\t * paddingRight\n\t * paddingTop\n\t * perspective\n\t * right\n\t * shapeMargin\n\t * strokeDashoffset\n\t * strokeWidth\n\t * textIndent\n\t * top\n\t * transformOrigin\n\t * width\n\t * wordSpacing\n\t */\n\t\t// tslint:disable-next-line:max-line-length\n\tvar rxAddPx = /^(b(lockSize|o(rder(Bottom(LeftRadius|RightRadius|Width)|Image(Outset|Width)|LeftWidth|R(adius|ightWidth)|Spacing|Top(LeftRadius|RightRadius|Width)|Width)|ttom))|column(Gap|RuleWidth|Width)|f(lexBasis|ontSize)|grid(ColumnGap|Gap|RowGap)|height|inlineSize|le(ft|tterSpacing)|m(a(rgin(Bottom|Left|Right|Top)|x(BlockSize|Height|InlineSize|Width))|in(BlockSize|Height|InlineSize|Width))|o(bjectPosition|utline(Offset|Width))|p(adding(Bottom|Left|Right|Top)|erspective)|right|s(hapeMargin|troke(Dashoffset|Width))|t(extIndent|op|ransformOrigin)|w(idth|ordSpacing))$/;\n\t/**\n\t * Return a Normalisation that can be used to set / get a prefixed style\n\t * property.\n\t */\n\tfunction getSetPrefixed(propertyName, unprefixed) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue === undefined) {\n\t\t\t\treturn computePropertyValue(element, propertyName) || computePropertyValue(element, unprefixed);\n\t\t\t}\n\t\t\telement.style[propertyName] = element.style[unprefixed] = propertyValue;\n\t\t};\n\t}\n\t/**\n\t * Return a Normalisation that can be used to set / get a style property.\n\t */\n\tfunction getSetStyle(propertyName) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue === undefined) {\n\t\t\t\treturn computePropertyValue(element, propertyName);\n\t\t\t}\n\t\t\telement.style[propertyName] = propertyValue;\n\t\t};\n\t}\n\t/**\n\t * Vendor prefixes. Chrome / Safari, Firefox, IE / Edge, Opera.\n\t */\n\tvar rxVendors = /^(webkit|moz|ms|o)[A-Z]/,\n\t\tprefixElement = State.prefixElement;\n\tif (prefixElement) {\n\t\tfor (var propertyName in prefixElement.style) {\n\t\t\tif (rxVendors.test(propertyName)) {\n\t\t\t\tvar unprefixed = propertyName.replace(/^[a-z]+([A-Z])/, function ($, letter) {\n\t\t\t\t\treturn letter.toLowerCase();\n\t\t\t\t});\n\t\t\t\t{\n\t\t\t\t\tvar addUnit = rxAddPx.test(unprefixed) ? "px" : undefined;\n\t\t\t\t\tregisterNormalization(["Element", unprefixed, getSetPrefixed(propertyName, unprefixed), addUnit]);\n\t\t\t\t}\n\t\t\t} else if (!hasNormalization(["Element", propertyName])) {\n\t\t\t\tvar _addUnit = rxAddPx.test(propertyName) ? "px" : undefined;\n\t\t\t\tregisterNormalization(["Element", propertyName, getSetStyle(propertyName), _addUnit]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Project\n\t/**\n\t * Get/set an attribute.\n\t */\n\tfunction getAttribute(name) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue === undefined) {\n\t\t\t\treturn element.getAttribute(name);\n\t\t\t}\n\t\t\telement.setAttribute(name, propertyValue);\n\t\t};\n\t}\n\tvar base = document.createElement("div"),\n\t\trxSubtype = /^SVG(.*)Element$/,\n\t\trxElement = /Element$/;\n\tObject.getOwnPropertyNames(window).forEach(function (property) {\n\t\tvar subtype = rxSubtype.exec(property);\n\t\tif (subtype && subtype[1] !== "SVG") {\n\t\t\t// Don\'t do SVGSVGElement.\n\t\t\ttry {\n\t\t\t\tvar element = subtype[1] ? document.createElementNS("http://www.w3.org/2000/svg", (subtype[1] || "svg").toLowerCase()) : document.createElement("svg");\n\t\t\t\t// tslint:disable-next-line:forin\n\t\t\t\tfor (var attribute in element) {\n\t\t\t\t\t// Although this isn\'t a tween without prototypes, we do\n\t\t\t\t\t// want to get hold of all attributes and not just own ones.\n\t\t\t\t\tvar value = element[attribute];\n\t\t\t\t\tif (isString(attribute) && !(attribute[0] === "o" && attribute[1] === "n") && attribute !== attribute.toUpperCase() && !rxElement.test(attribute) && !(attribute in base) && !isFunction(value)) {\n\t\t\t\t\t\t// TODO: Should this all be set on the generic SVGElement, it would save space and time, but not as powerful\n\t\t\t\t\t\tregisterNormalization([property, attribute, getAttribute(attribute)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error("VelocityJS: Error when trying to identify SVG attributes on " + property + ".", e);\n\t\t\t}\n\t\t}\n\t});\n\n\t// Project\n\t/**\n\t * Get/set the width or height.\n\t */\n\tfunction getDimension$1(name) {\n\t\treturn function (element, propertyValue) {\n\t\t\tif (propertyValue === undefined) {\n\t\t\t\t// Firefox throws an error if .getBBox() is called on an SVG that isn\'t attached to the DOM.\n\t\t\t\ttry {\n\t\t\t\t\treturn element.getBBox()[name] + "px";\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn "0px";\n\t\t\t\t}\n\t\t\t}\n\t\t\telement.setAttribute(name, propertyValue);\n\t\t};\n\t}\n\tregisterNormalization(["SVGElement", "width", getDimension$1("width")]);\n\tregisterNormalization(["SVGElement", "height", getDimension$1("height")]);\n\n\t// Project\n\t/**\n\t * A fake normalization used to allow the "tween" property easy access.\n\t */\n\tfunction getSetTween(element, propertyValue) {\n\t\tif (propertyValue === undefined) {\n\t\t\treturn "";\n\t\t}\n\t}\n\tregisterNormalization(["Element", "tween", getSetTween]);\n\n\t// Automatically generated\n\tvar VERSION = "2.0.5";\n\n\t// Project\n\tvar Velocity$$1 = Velocity$1;\n\t/**\n\t * These parts of Velocity absolutely must be included, even if they\'re unused!\n\t */\n\tvar VelocityStatic;\n\t(function (VelocityStatic) {\n\t\t/**\n\t\t * Actions cannot be replaced if they are internal (hasOwnProperty is false\n\t\t * but they still exist). Otherwise they can be replaced by users.\n\t\t *\n\t\t * All external method calls should be using actions rather than sub-calls\n\t\t * of Velocity itself.\n\t\t */\n\t\tVelocityStatic.Actions = Actions;\n\t\t/**\n\t\t * Our known easing functions.\n\t\t */\n\t\tVelocityStatic.Easings = Easings;\n\t\t/**\n\t\t * The currently registered sequences.\n\t\t */\n\t\tVelocityStatic.Sequences = SequencesObject;\n\t\t/**\n\t\t * Current internal state of Velocity.\n\t\t */\n\t\tVelocityStatic.State = State; // tslint:disable-line:no-shadowed-variable\n\t\t/**\n\t\t * Velocity option defaults, which can be overriden by the user.\n\t\t */\n\t\tVelocityStatic.defaults = defaults$1;\n\t\t/**\n\t\t * Used to patch any object to allow Velocity chaining. In order to chain an\n\t\t * object must either be treatable as an array - with a <code>.length</code>\n\t\t * property, and each member a Node, or a Node directly.\n\t\t *\n\t\t * By default Velocity will try to patch <code>window</code>,\n\t\t * <code>jQuery</code>, <code>Zepto</code>, and several classes that return\n\t\t * Nodes or lists of Nodes.\n\t\t */\n\t\tVelocityStatic.patch = patch;\n\t\t/**\n\t\t * Set to true, 1 or 2 (most verbose) to output debug info to console.\n\t\t */\n\t\tVelocityStatic.debug = false;\n\t\t/**\n\t\t * In mock mode, all animations are forced to complete immediately upon the\n\t\t * next rAF tick. If there are further animations queued then they will each\n\t\t * take one single frame in turn. Loops and repeats will be disabled while\n\t\t * <code>mock = true</code>.\n\t\t */\n\t\tVelocityStatic.mock = false;\n\t\t/**\n\t\t * Save our version number somewhere visible.\n\t\t */\n\t\tVelocityStatic.version = VERSION;\n\t\t/**\n\t\t * Added as a fallback for "import {Velocity} from \'velocity-animate\';".\n\t\t */\n\t\tVelocityStatic.Velocity = Velocity$1; // tslint:disable-line:no-shadowed-variable\n\t})(VelocityStatic || (VelocityStatic = {}));\n\t/* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */\n\tvar IE = function () {\n\t\tif (document.documentMode) {\n\t\t\treturn document.documentMode;\n\t\t} else {\n\t\t\tfor (var i = 7; i > 4; i--) {\n\t\t\t\tvar div = document.createElement("div");\n\t\t\t\tdiv.innerHTML = "<!" + "--" + "[if IE " + i + "]><span></span><![endif]--\x3e";\n\t\t\t\tif (div.getElementsByTagName("span").length) {\n\t\t\t\t\tdiv = null;\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}();\n\t/******************\n\t Unsupported\n\t ******************/\n\tif (IE <= 8) {\n\t\tthrow new Error("VelocityJS cannot run on Internet Explorer 8 or earlier");\n\t}\n\t/******************\n\t Frameworks\n\t ******************/\n\tif (window) {\n\t\t/*\n       * Both jQuery and Zepto allow their $.fn object to be extended to allow\n       * wrapped elements to be subjected to plugin calls. If either framework is\n       * loaded, register a "velocity" extension pointing to Velocity\'s core\n       * animate() method. Velocity also registers itself onto a global container\n       * (window.jQuery || window.Zepto || window) so that certain features are\n       * accessible beyond just a per-element scope. Accordingly, Velocity can\n       * both act on wrapped DOM elements and stand alone for targeting raw DOM\n       * elements.\n       */\n\t\tvar jQuery = window.jQuery,\n\t\t\tZepto = window.Zepto;\n\t\tpatch(window, true);\n\t\tpatch(Element && Element.prototype);\n\t\tpatch(NodeList && NodeList.prototype);\n\t\tpatch(HTMLCollection && HTMLCollection.prototype);\n\t\tpatch(jQuery, true);\n\t\tpatch(jQuery && jQuery.fn);\n\t\tpatch(Zepto, true);\n\t\tpatch(Zepto && Zepto.fn);\n\t}\n\t// Make sure that the values within Velocity are read-only and upatchable.\n\n\tvar _loop = function _loop(property) {\n\t\tif (VelocityStatic.hasOwnProperty(property)) {\n\t\t\tswitch (typeof property === "undefined" ? "undefined" : _typeof(property)) {\n\t\t\t\tcase "number":\n\t\t\t\tcase "boolean":\n\t\t\t\t\tdefineProperty$1(Velocity$$1, property, {\n\t\t\t\t\t\tget: function get$$1() {\n\t\t\t\t\t\t\treturn VelocityStatic[property];\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function set$$1(value) {\n\t\t\t\t\t\t\tVelocityStatic[property] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, true);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdefineProperty$1(Velocity$$1, property, VelocityStatic[property], true);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\tfor (var property in VelocityStatic) {\n\t\t_loop(property);\n\t}\n\tObject.freeze(Velocity$$1);\n\n\t// Project\n\tvar rxPercents = /(\\d*\\.\\d+|\\d+\\.?|from|to)/g;\n\tfunction expandSequence(animation, sequence) {\n\t\tvar tweens = animation.tweens = Object.create(null),\n\t\t\telement = animation.element;\n\t\tfor (var propertyName in sequence.tweens) {\n\t\t\tif (sequence.tweens.hasOwnProperty(propertyName)) {\n\t\t\t\tvar fn = getNormalization(element, propertyName);\n\t\t\t\tif (!fn && propertyName !== "tween") {\n\t\t\t\t\tif (Velocity$$1.debug) {\n\t\t\t\t\t\tconsole.log("Skipping [" + propertyName + "] due to a lack of browser support.");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttweens[propertyName] = {\n\t\t\t\t\tfn: fn,\n\t\t\t\t\tsequence: sequence.tweens[propertyName]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Used to register a sequence. This should never be called by users\n\t * directly, instead it should be called via an action:<br/>\n\t * <code>Velocity("registerSequence", ""name", VelocitySequence);</code>\n\t */\n\tfunction registerSequence(args) {\n\t\tif (isPlainObject(args[0])) {\n\t\t\tfor (var name in args[0]) {\n\t\t\t\tif (args[0].hasOwnProperty(name)) {\n\t\t\t\t\tregisterSequence([name, args[0][name]]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isString(args[0])) {\n\t\t\tvar _name = args[0],\n\t\t\t\tsequence = args[1];\n\t\t\tif (!isString(_name)) {\n\t\t\t\tconsole.warn("VelocityJS: Trying to set \'registerSequence\' name to an invalid value:", _name);\n\t\t\t} else if (!isPlainObject(sequence)) {\n\t\t\t\tconsole.warn("VelocityJS: Trying to set \'registerSequence\' sequence to an invalid value:", _name, sequence);\n\t\t\t} else {\n\t\t\t\tif (SequencesObject[_name]) {\n\t\t\t\t\tconsole.warn("VelocityJS: Replacing named sequence:", _name);\n\t\t\t\t}\n\t\t\t\tvar percents = {},\n\t\t\t\t\tsteps = new Array(100),\n\t\t\t\t\tproperties = [],\n\t\t\t\t\tsequenceList = SequencesObject[_name] = {},\n\t\t\t\t\tduration = validateDuration(sequence.duration);\n\t\t\t\tsequenceList.tweens = {};\n\t\t\t\tif (isNumber(duration)) {\n\t\t\t\t\tsequenceList.duration = duration;\n\t\t\t\t}\n\t\t\t\tfor (var part in sequence) {\n\t\t\t\t\tif (sequence.hasOwnProperty(part)) {\n\t\t\t\t\t\tvar keys = String(part).match(rxPercents);\n\t\t\t\t\t\tif (keys) {\n\t\t\t\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\t\t\t\tvar _didIteratorError = false;\n\t\t\t\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\t\t\t\tvar key = _step.value;\n\n\t\t\t\t\t\t\t\t\tvar percent = key === "from" ? 0 : key === "to" ? 100 : parseFloat(key);\n\t\t\t\t\t\t\t\t\tif (percent < 0 || percent > 100) {\n\t\t\t\t\t\t\t\t\t\tconsole.warn("VelocityJS: Trying to use an invalid value as a percentage (0 <= n <= 100):", _name, percent);\n\t\t\t\t\t\t\t\t\t} else if (isNaN(percent)) {\n\t\t\t\t\t\t\t\t\t\tconsole.warn("VelocityJS: Trying to use an invalid number as a percentage:", _name, part, key);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (!percents[String(percent)]) {\n\t\t\t\t\t\t\t\t\t\t\tpercents[String(percent)] = [];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tpercents[String(percent)].push(part);\n\t\t\t\t\t\t\t\t\t\tfor (var property in sequence[part]) {\n\t\t\t\t\t\t\t\t\t\t\tif (!properties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\t\t\tproperties.push(property);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t\t\t\t_iteratorError = err;\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar orderedPercents = Object.keys(percents).sort(function (a, b) {\n\t\t\t\t\tvar a1 = parseFloat(a),\n\t\t\t\t\t\tb1 = parseFloat(b);\n\t\t\t\t\treturn a1 > b1 ? 1 : a1 < b1 ? -1 : 0;\n\t\t\t\t});\n\t\t\t\torderedPercents.forEach(function (key) {\n\t\t\t\t\tsteps.push.apply(percents[key]);\n\t\t\t\t});\n\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator2 = properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\tvar _property = _step2.value;\n\n\t\t\t\t\t\tvar parts = [],\n\t\t\t\t\t\t\tpropertyName = camelCase(_property);\n\t\t\t\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\t\t\t\tvar _didIteratorError3 = false;\n\t\t\t\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfor (var _iterator3 = orderedPercents[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\t\t\t\tvar _key = _step3.value;\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion6 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError6 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError6 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator6 = percents[_key][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n\t\t\t\t\t\t\t\t\t\tvar _value = _step6.value;\n\n\t\t\t\t\t\t\t\t\t\tvar stepProperties = sequence[_value];\n\t\t\t\t\t\t\t\t\t\tif (stepProperties[propertyName]) {\n\t\t\t\t\t\t\t\t\t\t\tparts.push(isString(stepProperties[propertyName]) ? stepProperties[propertyName] : stepProperties[propertyName][0]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError6 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError6 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion6 && _iterator6.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator6.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError6) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t\t\t\t_iteratorError3 = err;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (parts.length) {\n\t\t\t\t\t\t\tvar realSequence = findPattern(parts, propertyName);\n\t\t\t\t\t\t\tvar index = 0;\n\t\t\t\t\t\t\tif (realSequence) {\n\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion4 = true;\n\t\t\t\t\t\t\t\tvar _didIteratorError4 = false;\n\t\t\t\t\t\t\t\tvar _iteratorError4 = undefined;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tfor (var _iterator4 = orderedPercents[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\t\t\t\t\t\t\t\tvar _key2 = _step4.value;\n\t\t\t\t\t\t\t\t\t\tvar _iteratorNormalCompletion5 = true;\n\t\t\t\t\t\t\t\t\t\tvar _didIteratorError5 = false;\n\t\t\t\t\t\t\t\t\t\tvar _iteratorError5 = undefined;\n\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tfor (var _iterator5 = percents[_key2][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar value = _step5.value;\n\n\t\t\t\t\t\t\t\t\t\t\t\tvar originalProperty = sequence[value][propertyName];\n\t\t\t\t\t\t\t\t\t\t\t\tif (originalProperty) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(originalProperty) && originalProperty.length > 1 && (isString(originalProperty[1]) || Array.isArray(originalProperty[1]))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trealSequence[index].easing = validateEasing(originalProperty[1], sequenceList.duration || DEFAULT_DURATION);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\trealSequence[index++].percent = parseFloat(_key2) / 100;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\t_didIteratorError5 = true;\n\t\t\t\t\t\t\t\t\t\t\t_iteratorError5 = err;\n\t\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_iterator5.return();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t\t\tif (_didIteratorError5) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError5;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t_didIteratorError4 = true;\n\t\t\t\t\t\t\t\t\t_iteratorError4 = err;\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t\t\t\t\t\t\t\t_iterator4.return();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tif (_didIteratorError4) {\n\t\t\t\t\t\t\t\t\t\t\tthrow _iteratorError4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsequenceList.tweens[propertyName] = realSequence;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tregisterAction(["registerSequence", registerSequence], true);\n\n\t// Project\n\tvar globalPromise = void 0;\n\ttry {\n\t\tglobalPromise = Promise;\n\t} catch ( /**/_a) {/**/}\n\tvar noPromiseOption = ", if that is deliberate then pass `promiseRejectEmpty:false` as an option";\n\t/**\n\t * Patch a VelocityResult with a Promise.\n\t */\n\tfunction patchPromise(promiseObject, result) {\n\t\tdefineProperty$1(result, "promise", promiseObject);\n\t\tdefineProperty$1(result, "then", promiseObject.then.bind(promiseObject));\n\t\tdefineProperty$1(result, "catch", promiseObject.catch.bind(promiseObject));\n\t\tif (promiseObject.finally) {\n\t\t\t// Semi-standard\n\t\t\tdefineProperty$1(result, "finally", promiseObject.finally.bind(promiseObject));\n\t\t}\n\t}\n\t/* tslint:enable:max-line-length */\n\tfunction Velocity$1() {\n\t\tfor (var _len = arguments.length, argsList = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targsList[_key] = arguments[_key];\n\t\t}\n\n\t\tvar\n\t\t\t/**\n\t\t\t * A shortcut to the default options.\n\t\t\t */\n\t\t\tdefaults$$1 = defaults$1,\n\n\t\t\t/**\n\t\t\t * Shortcut to arguments for file size.\n\t\t\t */\n\t\t\targs = arguments,\n\n\t\t\t/**\n\t\t\t * Cache of the first argument - this is used often enough to be saved.\n\t\t\t */\n\t\t\targs0 = args[0],\n\n\t\t\t/**\n\t\t\t * To allow for expressive CoffeeScript code, Velocity supports an\n\t\t\t * alternative syntax in which "elements" (or "e"), "properties" (or\n\t\t\t * "p"), and "options" (or "o") objects are defined on a container\n\t\t\t * object that\'s passed in as Velocity\'s sole argument.\n\t\t\t *\n\t\t\t * Note: Some browsers automatically populate arguments with a\n\t\t\t * "properties" object. We detect it by checking for its default\n\t\t\t * "names" property.\n\t\t\t */\n\t\t\t\t// TODO: Confirm which browsers - if <=IE8 the we can drop completely\n\t\t\tsyntacticSugar = isPlainObject(args0) && (args0.p || isPlainObject(args0.properties) && !args0.properties.names || isString(args0.properties));\n\t\tvar\n\t\t\t/**\n\t\t\t *  When Velocity is called via the utility function (Velocity()),\n\t\t\t * elements are explicitly passed in as the first parameter. Thus,\n\t\t\t * argument positioning varies.\n\t\t\t */\n\t\t\targumentIndex = 0,\n\n\t\t\t/**\n\t\t\t * The list of elements, extended with Promise and Velocity.\n\t\t\t */\n\t\t\telements = void 0,\n\n\t\t\t/**\n\t\t\t * The properties being animated. This can be a string, in which case it\n\t\t\t * is either a function for these elements, or it is a "named" animation\n\t\t\t * sequence to use instead. Named sequences start with either "callout."\n\t\t\t * or "transition.". When used as a callout the values will be reset\n\t\t\t * after finishing. When used as a transtition then there is no special\n\t\t\t * handling after finishing.\n\t\t\t */\n\t\t\tpropertiesMap = void 0,\n\n\t\t\t/**\n\t\t\t * Options supplied, this will be mapped and validated into\n\t\t\t * <code>options</code>.\n\t\t\t */\n\t\t\toptionsMap = void 0,\n\n\t\t\t/**\n\t\t\t * If called via a chain then this contains the <b>last</b> calls\n\t\t\t * animations. If this does not have a value then any access to the\n\t\t\t * element\'s animations needs to be to the currently-running ones.\n\t\t\t */\n\t\t\tanimations = void 0,\n\n\t\t\t/**\n\t\t\t * The promise that is returned.\n\t\t\t */\n\t\t\tpromise = void 0,\n\n\t\t\t// Used when the animation is finished\n\t\t\tresolver = void 0,\n\n\t\t\t// Used when there was an issue with one or more of the Velocity arguments\n\t\t\trejecter = void 0;\n\t\t//console.log(`Velocity`, _arguments)\n\t\t// First get the elements, and the animations connected to the last call if\n\t\t// this is chained.\n\t\t// TODO: Clean this up a bit\n\t\t// TODO: Throw error if the chain is called with elements as the first argument. isVelocityResult(this) && ( (isNode(arg0) || isWrapped(arg0)) && arg0 == this)\n\t\tif (isNode(this)) {\n\t\t\t// This is from a chain such as document.getElementById("").velocity(...)\n\t\t\telements = [this];\n\t\t} else if (isWrapped(this)) {\n\t\t\t// This might be a chain from something else, but if chained from a\n\t\t\t// previous Velocity() call then grab the animations it\'s related to.\n\t\t\telements = cloneArray(this);\n\t\t\tif (isVelocityResult(this)) {\n\t\t\t\tanimations = this.velocity.animations;\n\t\t\t}\n\t\t} else if (syntacticSugar) {\n\t\t\telements = cloneArray(args0.elements || args0.e);\n\t\t\targumentIndex++;\n\t\t} else if (isNode(args0)) {\n\t\t\telements = cloneArray([args0]);\n\t\t\targumentIndex++;\n\t\t} else if (isWrapped(args0)) {\n\t\t\telements = cloneArray(args0);\n\t\t\targumentIndex++;\n\t\t}\n\t\t// Allow elements to be chained.\n\t\tif (elements) {\n\t\t\tdefineProperty$1(elements, "velocity", Velocity$1.bind(elements));\n\t\t\tif (animations) {\n\t\t\t\tdefineProperty$1(elements.velocity, "animations", animations);\n\t\t\t}\n\t\t}\n\t\t// Next get the propertiesMap and options.\n\t\tif (syntacticSugar) {\n\t\t\tpropertiesMap = getValue(args0.properties, args0.p);\n\t\t} else {\n\t\t\t// TODO: Should be possible to call Velocity("pauseAll") - currently not possible\n\t\t\tpropertiesMap = args[argumentIndex++];\n\t\t}\n\t\t// Get any options map passed in as arguments first, expand any direct\n\t\t// options if possible.\n\t\tvar isReverse = propertiesMap === "reverse",\n\t\t\tisAction = !isReverse && isString(propertiesMap),\n\t\t\tmaybeSequence = isAction && SequencesObject[propertiesMap],\n\t\t\topts = syntacticSugar ? getValue(args0.options, args0.o) : args[argumentIndex];\n\t\tif (isPlainObject(opts)) {\n\t\t\toptionsMap = opts;\n\t\t}\n\t\t// Create the promise if supported and wanted.\n\t\tif (globalPromise && getValue(optionsMap && optionsMap.promise, defaults$$1.promise)) {\n\t\t\tpromise = new globalPromise(function (resolve, reject) {\n\t\t\t\trejecter = reject;\n\t\t\t\t// IMPORTANT:\n\t\t\t\t// If a resolver tries to run on a Promise then it will wait until\n\t\t\t\t// that Promise resolves - but in this case we\'re running on our own\n\t\t\t\t// Promise, so need to make sure it\'s not seen as one. Removing\n\t\t\t\t// these values for the duration of the resolve.\n\t\t\t\t// Due to being an async call, they should be back to "normal"\n\t\t\t\t// before the <code>.then()</code> function gets called.\n\t\t\t\tresolver = function resolver(result) {\n\t\t\t\t\tif (isVelocityResult(result) && result.promise) {\n\t\t\t\t\t\tdelete result.then;\n\t\t\t\t\t\tdelete result.catch;\n\t\t\t\t\t\tdelete result.finally;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\tpatchPromise(result.promise, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (elements) {\n\t\t\t\tpatchPromise(promise, elements);\n\t\t\t}\n\t\t}\n\t\tif (promise) {\n\t\t\tvar optionPromiseRejectEmpty = optionsMap && optionsMap.promiseRejectEmpty,\n\t\t\t\tpromiseRejectEmpty = getValue(optionPromiseRejectEmpty, defaults$$1.promiseRejectEmpty);\n\t\t\tif (!elements && !isAction) {\n\t\t\t\tif (promiseRejectEmpty) {\n\t\t\t\t\trejecter("Velocity: No elements supplied" + (isBoolean(optionPromiseRejectEmpty) ? "" : noPromiseOption) + ". Aborting.");\n\t\t\t\t} else {\n\t\t\t\t\tresolver();\n\t\t\t\t}\n\t\t\t} else if (!propertiesMap) {\n\t\t\t\tif (promiseRejectEmpty) {\n\t\t\t\t\trejecter("Velocity: No properties supplied" + (isBoolean(optionPromiseRejectEmpty) ? "" : noPromiseOption) + ". Aborting.");\n\t\t\t\t} else {\n\t\t\t\t\tresolver();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!elements && !isAction || !propertiesMap) {\n\t\t\treturn promise;\n\t\t}\n\t\t// NOTE: Can\'t use isAction here due to type inference - there are callbacks\n\t\t// between so the type isn\'t considered safe.\n\t\tif (isAction) {\n\t\t\tvar actionArgs = [],\n\t\t\t\tpromiseHandler = promise && {\n\t\t\t\t\t_promise: promise,\n\t\t\t\t\t_resolver: resolver,\n\t\t\t\t\t_rejecter: rejecter\n\t\t\t\t};\n\t\t\twhile (argumentIndex < args.length) {\n\t\t\t\tactionArgs.push(args[argumentIndex++]);\n\t\t\t}\n\t\t\t// Velocity\'s behavior is categorized into "actions". If a string is\n\t\t\t// passed in instead of a propertiesMap then that will call a function\n\t\t\t// to do something special to the animation linked.\n\t\t\t// There is one special case - "reverse" - which is handled differently,\n\t\t\t// by being stored on the animation and then expanded when the animation\n\t\t\t// starts.\n\t\t\tvar action = propertiesMap.replace(/\\..*$/, ""),\n\t\t\t\tcallback = Actions[action];\n\t\t\tif (callback) {\n\t\t\t\tvar result = callback(actionArgs, elements, promiseHandler, propertiesMap);\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\treturn elements || promise;\n\t\t\t} else if (!maybeSequence) {\n\t\t\t\tconsole.error("VelocityJS: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvar hasValidDuration = void 0;\n\t\tif (isPlainObject(propertiesMap) || isReverse || maybeSequence) {\n\t\t\t/**\n\t\t\t * The options for this set of animations.\n\t\t\t */\n\t\t\tvar options = {};\n\t\t\tvar isSync = defaults$$1.sync;\n\t\t\t// Private options first - set as non-enumerable, and starting with an\n\t\t\t// underscore so we can filter them out.\n\t\t\tif (promise) {\n\t\t\t\tdefineProperty$1(options, "_promise", promise);\n\t\t\t\tdefineProperty$1(options, "_rejecter", rejecter);\n\t\t\t\tdefineProperty$1(options, "_resolver", resolver);\n\t\t\t}\n\t\t\tdefineProperty$1(options, "_ready", 0);\n\t\t\tdefineProperty$1(options, "_started", 0);\n\t\t\tdefineProperty$1(options, "_completed", 0);\n\t\t\tdefineProperty$1(options, "_total", 0);\n\t\t\t// Now check the optionsMap\n\t\t\tif (isPlainObject(optionsMap)) {\n\t\t\t\tvar validDuration = validateDuration(optionsMap.duration);\n\t\t\t\thasValidDuration = validDuration !== undefined;\n\t\t\t\toptions.duration = getValue(validDuration, defaults$$1.duration);\n\t\t\t\toptions.delay = getValue(validateDelay(optionsMap.delay), defaults$$1.delay);\n\t\t\t\t// Need the extra fallback here in case it supplies an invalid\n\t\t\t\t// easing that we need to overrride with the default.\n\t\t\t\toptions.easing = validateEasing(getValue(optionsMap.easing, defaults$$1.easing), options.duration) || validateEasing(defaults$$1.easing, options.duration);\n\t\t\t\toptions.loop = getValue(validateLoop(optionsMap.loop), defaults$$1.loop);\n\t\t\t\toptions.repeat = options.repeatAgain = getValue(validateRepeat(optionsMap.repeat), defaults$$1.repeat);\n\t\t\t\tif (optionsMap.speed != null) {\n\t\t\t\t\toptions.speed = getValue(validateSpeed(optionsMap.speed), 1);\n\t\t\t\t}\n\t\t\t\tif (isBoolean(optionsMap.promise)) {\n\t\t\t\t\toptions.promise = optionsMap.promise;\n\t\t\t\t}\n\t\t\t\toptions.queue = getValue(validateQueue(optionsMap.queue), defaults$$1.queue);\n\t\t\t\tif (optionsMap.mobileHA && !State.isGingerbread) {\n\t\t\t\t\t/* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)\n                   on animating elements. HA is removed from the element at the completion of its animation. */\n\t\t\t\t\t/* Note: Android Gingerbread doesn\'t support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */\n\t\t\t\t\t/* Note: You can read more about the use of mobileHA in Velocity\'s documentation: velocity-animate/#mobileHA. */\n\t\t\t\t\toptions.mobileHA = true;\n\t\t\t\t}\n\t\t\t\tif (optionsMap.drag === true) {\n\t\t\t\t\toptions.drag = true;\n\t\t\t\t}\n\t\t\t\tif (isNumber(optionsMap.stagger) || isFunction(optionsMap.stagger)) {\n\t\t\t\t\toptions.stagger = optionsMap.stagger;\n\t\t\t\t}\n\t\t\t\tif (!isReverse) {\n\t\t\t\t\tif (optionsMap["display"] != null) {\n\t\t\t\t\t\tpropertiesMap.display = optionsMap["display"];\n\t\t\t\t\t\tconsole.error("Deprecated \\"options.display\\" used, this is now a property:", optionsMap["display"]);\n\t\t\t\t\t}\n\t\t\t\t\tif (optionsMap["visibility"] != null) {\n\t\t\t\t\t\tpropertiesMap.visibility = optionsMap["visibility"];\n\t\t\t\t\t\tconsole.error("Deprecated \\"options.visibility\\" used, this is now a property:", optionsMap["visibility"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO: Allow functional options for different options per element\n\t\t\t\tvar optionsBegin = validateBegin(optionsMap.begin),\n\t\t\t\t\toptionsComplete = validateComplete(optionsMap.complete),\n\t\t\t\t\toptionsProgress = validateProgress(optionsMap.progress),\n\t\t\t\t\toptionsSync = validateSync(optionsMap.sync);\n\t\t\t\tif (optionsBegin != null) {\n\t\t\t\t\toptions.begin = optionsBegin;\n\t\t\t\t}\n\t\t\t\tif (optionsComplete != null) {\n\t\t\t\t\toptions.complete = optionsComplete;\n\t\t\t\t}\n\t\t\t\tif (optionsProgress != null) {\n\t\t\t\t\toptions.progress = optionsProgress;\n\t\t\t\t}\n\t\t\t\tif (optionsSync != null) {\n\t\t\t\t\tisSync = optionsSync;\n\t\t\t\t}\n\t\t\t} else if (!syntacticSugar) {\n\t\t\t\t// Expand any direct options if possible.\n\t\t\t\tvar offset = 0;\n\t\t\t\toptions.duration = validateDuration(args[argumentIndex], true);\n\t\t\t\tif (options.duration === undefined) {\n\t\t\t\t\toptions.duration = defaults$$1.duration;\n\t\t\t\t} else {\n\t\t\t\t\thasValidDuration = true;\n\t\t\t\t\toffset++;\n\t\t\t\t}\n\t\t\t\tif (!isFunction(args[argumentIndex + offset])) {\n\t\t\t\t\t// Despite coming before Complete, we can\'t pass a fn easing\n\t\t\t\t\tvar easing = validateEasing(args[argumentIndex + offset], getValue(options && validateDuration(options.duration), defaults$$1.duration), true);\n\t\t\t\t\tif (easing !== undefined) {\n\t\t\t\t\t\toffset++;\n\t\t\t\t\t\toptions.easing = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar complete = validateComplete(args[argumentIndex + offset], true);\n\t\t\t\tif (complete !== undefined) {\n\t\t\t\t\toptions.complete = complete;\n\t\t\t\t}\n\t\t\t\toptions.delay = defaults$$1.delay;\n\t\t\t\toptions.loop = defaults$$1.loop;\n\t\t\t\toptions.repeat = options.repeatAgain = defaults$$1.repeat;\n\t\t\t}\n\t\t\tif (isReverse && options.queue === false) {\n\t\t\t\tthrow new Error("VelocityJS: Cannot reverse a queue:false animation.");\n\t\t\t}\n\t\t\tif (!hasValidDuration && maybeSequence && maybeSequence.duration) {\n\t\t\t\toptions.duration = maybeSequence.duration;\n\t\t\t}\n\t\t\t// When a set of elements is targeted by a Velocity call, the set is\n\t\t\t// broken up and each element has the current Velocity call individually\n\t\t\t// queued onto it. In this way, each element\'s existing queue is\n\t\t\t// respected; some elements may already be animating and accordingly\n\t\t\t// should not have this current Velocity call triggered immediately\n\t\t\t// unless the sync:true option is used.\n\t\t\tvar rootAnimation = {\n\t\t\t\toptions: options,\n\t\t\t\telements: elements,\n\t\t\t\t_prev: undefined,\n\t\t\t\t_next: undefined,\n\t\t\t\t_flags: isSync ? 32 /* SYNC */ : 0,\n\t\t\t\tpercentComplete: 0,\n\t\t\t\tellapsedTime: 0,\n\t\t\t\ttimeStart: 0\n\t\t\t};\n\t\t\tanimations = [];\n\t\t\tfor (var index = 0; index < elements.length; index++) {\n\t\t\t\tvar element = elements[index];\n\t\t\t\tvar flags = 0;\n\t\t\t\tif (isNode(element)) {\n\t\t\t\t\t// TODO: This needs to check for valid animation targets, not just Elements\n\t\t\t\t\tif (isReverse) {\n\t\t\t\t\t\tvar lastAnimation = Data(element).lastAnimationList[options.queue];\n\t\t\t\t\t\tpropertiesMap = lastAnimation && lastAnimation.tweens;\n\t\t\t\t\t\tif (!propertiesMap) {\n\t\t\t\t\t\t\tconsole.error("VelocityJS: Attempting to reverse an animation on an element with no previous animation:", element);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tflags |= 64 /* REVERSE */ & ~(lastAnimation._flags & 64 /* REVERSE */); // tslint:disable-line:no-bitwise\n\t\t\t\t\t}\n\t\t\t\t\tvar animation = Object.assign({}, rootAnimation, { element: element, _flags: rootAnimation._flags | flags });\n\t\t\t\t\toptions._total++;\n\t\t\t\t\tanimations.push(animation);\n\t\t\t\t\tif (options.stagger) {\n\t\t\t\t\t\tif (isFunction(options.stagger)) {\n\t\t\t\t\t\t\tvar num = optionCallback(options.stagger, element, index, elements.length, elements, "stagger");\n\t\t\t\t\t\t\tif (isNumber(num)) {\n\t\t\t\t\t\t\t\tanimation.delay = options.delay + num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimation.delay = options.delay + options.stagger * index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (options.drag) {\n\t\t\t\t\t\tanimation.duration = options.duration - options.duration * Math.max(1 - (index + 1) / elements.length, 0.75);\n\t\t\t\t\t}\n\t\t\t\t\tif (maybeSequence) {\n\t\t\t\t\t\texpandSequence(animation, maybeSequence);\n\t\t\t\t\t} else if (isReverse) {\n\t\t\t\t\t\t// In this case we\'re using the previous animation, so\n\t\t\t\t\t\t// it will be expanded correctly when that one runs.\n\t\t\t\t\t\tanimation.tweens = propertiesMap;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimation.tweens = Object.create(null);\n\t\t\t\t\t\texpandProperties(animation, propertiesMap);\n\t\t\t\t\t}\n\t\t\t\t\tqueue$1(element, animation, options.queue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (State.isTicking === false) {\n\t\t\t\t// If the animation tick isn\'t running, start it. (Velocity shuts it\n\t\t\t\t// off when there are no active calls to process.)\n\t\t\t\ttick(false);\n\t\t\t}\n\t\t\tif (animations) {\n\t\t\t\tdefineProperty$1(elements.velocity, "animations", animations);\n\t\t\t}\n\t\t}\n\t\t/***************\n\t\t Chaining\n\t\t ***************/\n\t\t/* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */\n\t\treturn elements || promise;\n\t}\n\t/**\n\t * Call an option callback in a try/catch block and report an error if needed.\n\t */\n\tfunction optionCallback(fn, element, index, length, elements, option) {\n\t\ttry {\n\t\t\treturn fn.call(element, index, length, elements, option);\n\t\t} catch (e) {\n\t\t\tconsole.error("VelocityJS: Exception when calling \'" + option + "\' callback:", e);\n\t\t}\n\t}\n\n\t// Project\n\t/**\n\t * Used to patch any object to allow Velocity chaining. In order to chain an\n\t * object must either be treatable as an array - with a <code>.length</code>\n\t * property, and each member a Node, or a Node directly.\n\t *\n\t * By default Velocity will try to patch <code>window</code>,\n\t * <code>jQuery</code>, <code>Zepto</code>, and several classes that return\n\t * Nodes or lists of Nodes.\n\t */\n\tfunction patch(proto, global) {\n\t\ttry {\n\t\t\tdefineProperty$1(proto, (global ? "V" : "v") + "elocity", Velocity$1);\n\t\t} catch (e) {\n\t\t\tconsole.warn("VelocityJS: Error when trying to add prototype.", e);\n\t\t}\n\t}\n\n\t// Project\n\tvar Velocity$2 = Velocity$1;\n\t/**\n\t * These parts of Velocity absolutely must be included, even if they\'re unused!\n\t */\n\tvar VelocityStatic$1;\n\t(function (VelocityStatic) {\n\t\t/**\n\t\t * Actions cannot be replaced if they are internal (hasOwnProperty is false\n\t\t * but they still exist). Otherwise they can be replaced by users.\n\t\t *\n\t\t * All external method calls should be using actions rather than sub-calls\n\t\t * of Velocity itself.\n\t\t */\n\t\tVelocityStatic.Actions = Actions;\n\t\t/**\n\t\t * Our known easing functions.\n\t\t */\n\t\tVelocityStatic.Easings = Easings;\n\t\t/**\n\t\t * The currently registered sequences.\n\t\t */\n\t\tVelocityStatic.Sequences = SequencesObject;\n\t\t/**\n\t\t * Current internal state of Velocity.\n\t\t */\n\t\tVelocityStatic.State = State; // tslint:disable-line:no-shadowed-variable\n\t\t/**\n\t\t * Velocity option defaults, which can be overriden by the user.\n\t\t */\n\t\tVelocityStatic.defaults = defaults$1;\n\t\t/**\n\t\t * Used to patch any object to allow Velocity chaining. In order to chain an\n\t\t * object must either be treatable as an array - with a <code>.length</code>\n\t\t * property, and each member a Node, or a Node directly.\n\t\t *\n\t\t * By default Velocity will try to patch <code>window</code>,\n\t\t * <code>jQuery</code>, <code>Zepto</code>, and several classes that return\n\t\t * Nodes or lists of Nodes.\n\t\t */\n\t\tVelocityStatic.patch = patch;\n\t\t/**\n\t\t * Set to true, 1 or 2 (most verbose) to output debug info to console.\n\t\t */\n\t\tVelocityStatic.debug = false;\n\t\t/**\n\t\t * In mock mode, all animations are forced to complete immediately upon the\n\t\t * next rAF tick. If there are further animations queued then they will each\n\t\t * take one single frame in turn. Loops and repeats will be disabled while\n\t\t * <code>mock = true</code>.\n\t\t */\n\t\tVelocityStatic.mock = false;\n\t\t/**\n\t\t * Save our version number somewhere visible.\n\t\t */\n\t\tVelocityStatic.version = VERSION;\n\t\t/**\n\t\t * Added as a fallback for "import {Velocity} from \'velocity-animate\';".\n\t\t */\n\t\tVelocityStatic.Velocity = Velocity$1; // tslint:disable-line:no-shadowed-variable\n\t})(VelocityStatic$1 || (VelocityStatic$1 = {}));\n\t/* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */\n\tvar IE$1 = function () {\n\t\tif (document.documentMode) {\n\t\t\treturn document.documentMode;\n\t\t} else {\n\t\t\tfor (var i = 7; i > 4; i--) {\n\t\t\t\tvar div = document.createElement("div");\n\t\t\t\tdiv.innerHTML = "<!" + "--" + "[if IE " + i + "]><span></span><![endif]--\x3e";\n\t\t\t\tif (div.getElementsByTagName("span").length) {\n\t\t\t\t\tdiv = null;\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}();\n\t/******************\n\t Unsupported\n\t ******************/\n\tif (IE$1 <= 8) {\n\t\tthrow new Error("VelocityJS cannot run on Internet Explorer 8 or earlier");\n\t}\n\t/******************\n\t Frameworks\n\t ******************/\n\tif (window) {\n\t\t/*\n       * Both jQuery and Zepto allow their $.fn object to be extended to allow\n       * wrapped elements to be subjected to plugin calls. If either framework is\n       * loaded, register a "velocity" extension pointing to Velocity\'s core\n       * animate() method. Velocity also registers itself onto a global container\n       * (window.jQuery || window.Zepto || window) so that certain features are\n       * accessible beyond just a per-element scope. Accordingly, Velocity can\n       * both act on wrapped DOM elements and stand alone for targeting raw DOM\n       * elements.\n       */\n\t\tvar jQuery$1 = window.jQuery,\n\t\t\tZepto$1 = window.Zepto;\n\t\tpatch(window, true);\n\t\tpatch(Element && Element.prototype);\n\t\tpatch(NodeList && NodeList.prototype);\n\t\tpatch(HTMLCollection && HTMLCollection.prototype);\n\t\tpatch(jQuery$1, true);\n\t\tpatch(jQuery$1 && jQuery$1.fn);\n\t\tpatch(Zepto$1, true);\n\t\tpatch(Zepto$1 && Zepto$1.fn);\n\t}\n\t// Make sure that the values within Velocity are read-only and upatchable.\n\n\tvar _loop$1 = function _loop(property) {\n\t\tif (VelocityStatic$1.hasOwnProperty(property)) {\n\t\t\tswitch (typeof property === "undefined" ? "undefined" : _typeof(property)) {\n\t\t\t\tcase "number":\n\t\t\t\tcase "boolean":\n\t\t\t\t\tdefineProperty$1(Velocity$2, property, {\n\t\t\t\t\t\tget: function get$$1() {\n\t\t\t\t\t\t\treturn VelocityStatic$1[property];\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function set$$1(value) {\n\t\t\t\t\t\t\tVelocityStatic$1[property] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, true);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdefineProperty$1(Velocity$2, property, VelocityStatic$1[property], true);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\tfor (var property$1 in VelocityStatic$1) {\n\t\t_loop$1(property$1);\n\t}\n\tObject.freeze(Velocity$2);\n\n\treturn Velocity$2;\n\n})));\n//# sourceMappingURL=velocity.js.map\n\n\n//# sourceURL=webpack:///./dist/js/vendor/jquery.velocity.js?')}});