$align-selectors: '[data-align="full"], [data-align="wide"], [data-nb-align="pull-left"], [data-nb-align="pull-right"]';

// Default Layout Grid
// fs - full start
// ws - wide start
// cs - content start
// ce - content end
// cc - content center
// we - wide end
// fe - full end
// gs - gap start
// ge - gap end
// gcs - gap content start
// gce - gap content end
// The same thing applies for [cc] [ce].

//noinspection ALL
@mixin nb-content-layout-grid {
  @include layout-settings;

  display: grid;
  grid-column: fs / fe;
  grid-template-columns:
    [fs] Max(var(--nb-wrapper-sides-spacing), var(--full)) // [ws]
    [ws] calc(var(--wds) * 2) // [gs]
    [gs] var(--nb-sidecar-grid-gap) // [cs]
    [cs] 1fr // [gcs]
    [gcs] calc(var(--nb-sidecar-grid-gap)/2) // [cc]
    [cc] calc(var(--nb-sidecar-grid-gap)/2)  // [gce]
    [gce] 1fr // [gce]
    [ce] var(--nb-sidecar-grid-gap) // [ge]
    [ge] calc(var(--wde) * 2) // [we]
    [we] Max(var(--nb-wrapper-sides-spacing), var(--full)) [fe];

  // --------------
  // overwrite [class*="__inner-container"] styles
  padding-left: 0;
  padding-right: 0;

  // force grid items take up all the available horizontal space
  > * {
    width: 100%;
    max-width: none;
  }

  // overwrite default editor's styles on .editor-styles-wrapper .wp-block styles
  .editor-styles-wrapper & > .wp-block {
    margin-left: 0;
    margin-right: 0;
  }
  // --------------

  // this rule needs to be weaker than the one above
  @at-root {
    // @todo SASS has some troubles with :where, rendering this for each selector in &
    :where(#{&}) > * {
      grid-column: var(--block-content-start) / var(--block-content-end);
    }
  }

  @include below(lap) {
    grid-template-columns:
      [fs] var(--nb-wrapper-sides-spacing) // [ws]
      [ws] auto // [gs]
      [gs] 0 // [cs]
      [cs] 1fr // [gcs]
      [gcs] 0 // [cc]
      [cc] 0  // [gce]
      [gce] 1fr // [gce]
      [ce] 0 // [ge]
      [ge] auto // [we]
      [we] var(--nb-wrapper-sides-spacing) [fe];

    @at-root {
      :where(#{&}) > * {
        grid-column: ws / we;
      }
    }
  }
}

// Default Layout Settings
// --nb-sidecar-display - Block default display mode. (eg. grid or flex)
// --sticky-element-top-spacing - Used to position the sticky block.
// In Rosa2 this value will be equal with site header height, in this way,
// the sticky block will not be under the header.
@mixin layout-settings {
  --nb-sidecar-sidebar-small-width: 230px;
  --nb-sidecar-sidebar-medium-width: 300px;
  --nb-sidecar-sidebar-large-width: 500px;
  --nb-sidecar-sidebar-minimum-width: var(--nb-sidecar-sidebar-medium-width);
  --nb-sidecar-sidebar-default-width: calc(var(--nb-sidecar-sidebar-minimum-width) * 0.5);

  --nb-sidecar-display: block;
  --nb-sidecar-grid-gap: 3em;

  --sticky-element-top-spacing: 0px;

  --wds: var(--nb-sidecar-sidebar-default-width);
  --wde: var(--nb-sidecar-sidebar-default-width);

  --full: Max(0px, calc((100% - var(--nb-content-width-wide)) * 0.5));

  // Default position for blocks is between cs and ce.
  --block-content-start: cs;
  --block-content-end: ce;
  
  // Default block limits are ws and we.
  --block-limit-left: ws;
  --block-limit-right: we;
  
  @include above(ultra) {
    --nb-sidecar-sidebar-small-width: 10.5em;
    --nb-sidecar-sidebar-medium-width: 13.7em;
    --nb-sidecar-sidebar-large-width: 22.8em;
  }
}

@mixin nb-content-layout {
  padding-left: var(--nb-wrapper-sides-spacings);
  padding-right: var(--nb-wrapper-sides-spacings);

  > * {
    margin-left: auto;
    margin-right: auto;
  }

  > :not([class*="align"]) {
    max-width: var(--nb-content-width);
  }

  > .alignwide {
    max-width: var(--nb-content-width-wide);
  }

  > .alignfull {
    margin-left: calc( -1 * var(--nb-wrapper-sides-spacings) );
    margin-right: calc( -1 * var(--nb-wrapper-sides-spacings) );
  }
}
