// Default Layout Settings
// In Anima this value will be equal with site header height. 
// In this way, the sticky block will not be under the header.
@mixin nb-layout-settings {

  @each $side in left, right {
    --nb-sidecar-sidebar-#{$side}-gap: clamp(0px, var(--nb-sidecar-sidebar-#{$side}-width) * 999, var(--nb-sidecar-gap));
    --nb-sidecar-sidebar-#{$side}-max-width: calc(var(--nb-container-width) * 0.5 - var(--nb-sidecar-gap) * 1.5);
    --nb-sidecar-content-#{$side}: calc(50% - var(--nb-sidecar-sides) - var(--nb-sidecar-sidebar-#{$side}-width) - var(--nb-sidecar-sidebar-#{$side}-gap) - var(--nb-sidecar-gap) * 0.5);
  }
}


// Default Layout Grid
// fs - full start
// ws - wide start
// cs - content start
// ce - content end
// cc - content center
// we - wide end
// fe - full end
// gs - gap start
// ge - gap end
// gcs - gap content start
// gce - gap content end
// The same thing applies for [cc] [ce].

//noinspection ALL
@mixin nb-content-layout-grid {
  @include nb-layout-settings;

  display: grid;
  grid-column: fs / fe;
  grid-template-columns:
    [fs] var(--nb-sidecar-sides)
    [ws] var(--nb-sidecar-sidebar-left-width)
    [frs] 1fr
    [gs] var(--nb-sidecar-sidebar-left-gap)
    [cs] var(--nb-sidecar-content-left)
    [gcs] calc(var(--nb-sidecar-gap) / 2)
    [cc] calc(var(--nb-sidecar-gap) / 2)
    [gce] var(--nb-sidecar-content-right)
    [ce] var(--nb-sidecar-sidebar-right-gap)
    [ge] 1fr
    [fre] var(--nb-sidecar-sidebar-right-width)
    [we] var(--nb-sidecar-sides)
    [fe];

  // --------------
  // overwrite [class*="__inner-container"][class] styles
  &[class][class] {
    padding-left: 0;
    padding-right: 0;

    > .alignfull {
      margin-left: 0;
      margin-right: 0;
    }
  }

  // force grid items take up all the available horizontal space
  > * {
    width: 100%;
    max-width: none;
  }

  // wp-block comes with a set max-width of 840px
  > .wp-block {
    max-width: none;
  }

  // overwrite default editor's styles on .editor-styles-wrapper .wp-block styles
  .editor-styles-wrapper & > .wp-block {
    margin-left: 0;
    margin-right: 0;
  }
  // --------------

  // this rule needs to be weaker than the one above
  // @todo SASS has some troubles with :where, rendering this for each selector in &

  @at-root {
    :where(#{&}) > * {
      grid-column: var(--block-content-start) / var(--block-content-end);
    }

    :where(#{&}) > :is(.alignwide, [data-align="wide"]) {
      grid-column: var(--block-wide-start) / var(--block-wide-end);

      .nb-conditional-align & {

        &.break-align-left {
          grid-column-start: var(--block-wide-start);
        }

        &.break-align-right {
          grid-column-end: var(--block-wide-end);
        }
      }
    }

    :where(#{&}) > :is(.alignfull, [data-align="full"]) {
      grid-column: var(--block-full-start) / var(--block-full-end);

      .nb-conditional-align & {

        &.break-align-left {
          grid-column-start: var(--block-full-start);
        }

        &.break-align-right {
          grid-column-end: var(--block-full-end);
        }
      }
    }

    :where(#{&}) > :is(.alignleft, [data-align="left"], .alignright, [data-align="right"]) {
        grid-row-end: span 5;
    }

    :where(#{&}) > :is(.alignleft, [data-align="left"]) {
      --block-content-start: ws;
      --block-content-end: gs;
    }

    :where(#{&}) > :is(.alignright, [data-align="right"]) {
      --block-content-start: ge;
      --block-content-end: we;
    }
  }

  @include below(lap) {
    grid-template-columns:
      [fs] var(--nb-wrapper-sides-spacings) // [ws]
      [ws] auto // [gs]
      [gs] 0 // [cs]
      [cs] 1fr // [gcs]
      [gcs] 0 // [cc]
      [cc] 0  // [gce]
      [gce] 1fr // [gce]
      [ce] 0 // [ge]
      [ge] auto // [we]
      [we] var(--nb-wrapper-sides-spacings) [fe];

    @at-root {
      :where(#{&}) > * {
        grid-column: ws / we;
      }
    }
  }

  .nb-sidecar-area--sidebar & {
    @include above(lap) {
      display: block;
    }
  }
}

@mixin nb-content-layout {
  padding-left: var(--nb-wrapper-sides-spacings);
  padding-right: var(--nb-wrapper-sides-spacings);

  > * {
    margin-left: auto;
    margin-right: auto;
    max-width: var(--nb-content-width);
  }

  > :is(.alignwide, [data-align="wide"]) {
    max-width: var(--nb-container-width);
  }

  > :is(.alignfull, [data-align="full"]) {
    max-width: none;
    margin-left: calc( -1 * var(--nb-wrapper-sides-spacings) );
    margin-right: calc( -1 * var(--nb-wrapper-sides-spacings) );
  }
}
