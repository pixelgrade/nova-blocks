@import 'scss/mixins';

.entry-content {
  
  @include layout-grid;
  @include layout-settings;
  @include block-limits;
  @include block-content-alignments;
  @include block-alignments;
  
  flex-direction: column;
  
  // Everything is treated as a grid element,
  // So we are going to position it,
  // according his alignments.
  // By default every block is displayed
  // between CS and CE columns.
  > * {
    grid-column: var(--block-content-start)/var(--block-content-end);
  }
  
  // These blocks are having another blocks inside
  // them that could use alignments, so by default,
  // we are going to display the main div on all columns,
  // and position the block inside them based on their alignments.
  > .novablocks-layout,
  > .novablocks-block {
    grid-column: var(--all-columns);
  }
  
  > .novablocks-block {
    @include layout-grid;
    @include layout-settings;
    
    > * {
      grid-column: var(--block-content-start)/var(--block-content-end);
    }
  }
  
  .wp-block-group__inner-container {
    @include layout-grid;
    @include layout-settings;
    
    > * {
      grid-column: var(--block-content-start)/var(--block-content-end);
    }
  }
  
  .novablocks-sidebar,
  .wp-block-group {
    
    .wp-block-group__inner-container {
      --display-mode: block;
    }
  }
}

.novablocks-layout {
  
  @include layout-grid;
  @include layout-settings;
  @include block-limits;
  @include block-content-alignments;
  
  --block-limit-left: ws;
  --block-limit-right: we;
  
  // Temporary
  max-width: 100% !important;
  
  > * {
    grid-row: 1;
  }
  
  // Content column will always be
  // displayed on all columns. Doing that,
  // we can easily position pull-left and pull-right
  // items on the same grid, as the one used on the parent block.
  .novablocks-content {
    
    grid-column: var(--all-columns);
    @include layout-grid;
    
    [class*='__inner-container'] > * {
      max-width: 100% !important;
    }
    
    > * {
      grid-column: var(--block-content-start)/var(--block-content-end);
    }
  }
  
  // Sidebar Left with Content on the Right Layout.
  // Content will always start at CS and it
  // will end at layout block limit on the right. Limit on the right
  // is given by layout block alignment.
  // Sidebar will always start at block limit on
  // the left and will end at CS.
  &--sidebar-left[class][class] {
    --block-content-start: cs;
    --block-content-end: var(--block-limit-right);
    
    .novablocks-sidebar--left {
      grid-column: var(--block-limit-left)/cs;
    }
  }
  
  // Sidebar Right with Content on the Right Layout.
  // Content will always start at layout block limit on the left and
  // will end at CE. Limit on the left
  // is given by layout block alignment.
  // Sidebar will always start at CE and will end
  // at block limit on the right.
  &--sidebar-right[class][class] {
    --block-content-start: var(--block-limit-left);
    --block-content-end: ce;
    
    .novablocks-sidebar--right {
      grid-column: ce/var(--block-limit-right);
    }
  }
  
  // Sidebar Left with Content Centered and Sidebar Right Layout.
  // Content will always start at CS and will end at CE.
  // Sidebar Left will start at block limit left and end at CS.
  // Sidebar Right will start at CE and will end at block limit on right.
  &--complex[class][class] {
    
    --block-content-start: cs;
    --block-content-end: ce;
    
    .novablocks-sidebar--left {
      grid-column: var(--block-limit-left)/cs;
    }
    
    .novablocks-sidebar--right {
      grid-column: ce/var(--block-limit-right);
    }
  }
  
  // Make sure layout block is displayed on all columns.
  .novablocks-layout {
    grid-column: var(--all-columns);
    
    .novablocks-content {
      
      // By default all blocks inside content column,
      // will be displayed between CS and CE.
      // This could be changed based on layout used.
      > * {
        --block-content-start: cs;
        --block-content-end: ce;
      }
      
      @include block-alignments;
      
    }
  }
  
  @include block-alignments;
}

.novablocks-content,
.novablocks-sidebar {
  
  > * {
    @include block-spacing;
  }
}


// !!!! Temporary !!!!
// @todo: Remove this
.align-wide,
.align-full {
  
  &,
  * {
    max-width: 100% !important;
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
}

.entry-content[class] {
  
  &,
  [class*='__inner-container'] {
    padding-left: 0;
    padding-right: 0;
  }
  
  > .alignwide,
  > .alignfull {
    max-width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
}

.novablocks-content,
.novablocks-layout {
  flex-direction: column;
}

.novablocks-content {
  order: -1;
}

// Temporary class
// used for sticky elements
.sticky-element {
  position: sticky;
  top: 0;
}

.novablocks-collection {
  grid-column: var(--all-columns) !important;
}
