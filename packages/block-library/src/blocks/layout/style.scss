@import 'scss/mixins';
@import 'scss/block-limits';
@import 'scss/block-content-alignments';

:root {
  @include layout-settings;
}

.entry-content {
  
  @include layout-grid;
  
  // Everything is treated as a grid element,
  // So we are going to position it,
  // according his alignments.
  // By default every block is displayed
  // between CS and CE columns.
  > * {
    grid-column: var(--block-content-start)/var(--block-content-end);
  }
  
  // These blocks are having another blocks inside
  // them that could use alignments, so by default,
  // we are going to display the main div on all columns,
  // and position the block inside them based on their alignments.
  > .novablocks-layout {
    grid-column: var(--all-columns);
  }
  
  > .novablocks-block {
    
    > * {
      grid-column: var(--block-content-start)/var(--block-content-end);
    }
  }
  
  .wp-block-group__inner-container {
    @include layout-grid;
    
    > * {
      grid-column: var(--block-content-start)/var(--block-content-end);
    }
  }
  
  .novablocks-sidebar,
  .wp-block-group {
    
    .wp-block-group__inner-container {
      --display-mode: block;
    }
  }
}

.novablocks-layout {
  
  @include layout-grid;
  
  grid-column: var(--all-columns);
  
  > * {
    grid-row: 1;
  }
  
  // Sidebar Left with Content on the Right Layout.
  // Content will always start at CS and it
  // will end at layout block limit on the right. Limit on the right
  // is given by layout block alignment.
  // Sidebar will always start at block limit on
  // the left and will end at CS.
  &--sidebar-left {
    --block-content-start: cs;
    --block-content-end: var(--block-limit-right);
    
    .novablocks-sidebar--left {
      grid-column: var(--block-limit-left)/gs;
    }
  }
  
  // Sidebar Right with Content on the Right Layout.
  // Content will always start at layout block limit on the left and
  // will end at CE. Limit on the left
  // is given by layout block alignment.
  // Sidebar will always start at CE and will end
  // at block limit on the right.
  &--sidebar-right {
    --block-content-start: var(--block-limit-left);
    --block-content-end: ce;
    
    .novablocks-sidebar--right {
      grid-column: ge/var(--block-limit-right);
    }
  }
  
  // Sidebar Left with Content Centered and Sidebar Right Layout.
  // Content will always start at CS and will end at CE.
  // Sidebar Left will start at block limit left and end at CS.
  // Sidebar Right will start at CE and will end at block limit on right.
  &--complex {
    
    --block-content-start: cs;
    --block-content-end: ce;
    
    .novablocks-sidebar--left {
      grid-column: var(--block-limit-left)/gs;
    }
    
    .novablocks-sidebar--right {
      grid-column: ge/var(--block-limit-right);
    }
  }
}

// Content column will always be
// displayed on all columns. Doing that,
// we can easily position pull-left and pull-right
// items on the same grid, as the one used on the parent block.
.novablocks-content {
  
  grid-column: var(--all-columns);
  @include layout-grid;
  
  > * {
    grid-column: var(--block-content-start)/var(--block-content-end);
  }
  
  // Collections are coming with .alignfull,
  // to help us with background-color.
  // Neste in Collection Block is an inner-container
  // which will be treated as a grid too.
  > .novablocks-collection {
    grid-column: var(--all-columns);
  }
}

.novablocks-layout {
  
  // Make sure nested layout block is displayed on all columns.
  .novablocks-content:not(.entry-content) {
    
    .novablocks-layout {
      grid-column: var(--all-columns);
    
      .novablocks-content {
      
        // By default all blocks inside content column,
        // will be displayed between CS and CE.
        // This could be changed based on layout used.
        > *:not(.alignfull):not(.alignwide):not([class*="align-pull"]) {
          --block-content-start: cs;
          --block-content-end: ce;
        }
      }
    }
  }
}


// Apply top and bottom spacing
// on all blocks inside content
// and sidebar.
.novablocks-content,
.novablocks-sidebar {
  
  > * {
    @include block-spacing;
  }
}


// When grid is not used (eg. under 1024px),
// we are using flex with direction column.
.novablocks-content,
.novablocks-layout {
  flex-direction: column;
}

// Content should always have priority!
.novablocks-content {
  order: -1;
}

// Helper classes
.half-block-left {
  grid-column: var(--block-limit-left)/gcs;
}

.half-block-right {
  grid-column: gce/var(--block-limit-right);
}

.last-block-is-sticky {
  
  >:last-child {
    position: sticky;
    top: var(--sticky-element-top-spacing);
    z-index: -1;
  }
}


// Minimum Sidebar Width Logic
// At first, we will change the sidebar minimum width
// for the layout block, and if we have a nested layout block,
// we will change minimum sidebar width for that block too.
// Doing that, we will make sure that both blocks are sharing the same grid
// and alignments are working properly.
.novablocks-layout {
  
  &.novablocks-sidebar--large {
    
    &.novablocks-layout--sidebar-right {
      
      &,
      .novablocks-layout,
      .wp-block-group__inner-container {
        --minimum-sidebar-right-width: var(--default-width-large-sidebar);
      }
    }
    
    &.novablocks-layout--sidebar-left {
      
      &,
      .novablocks-layout,
      .wp-block-group__inner-container {
        --minimum-sidebar-left-width: var(--default-width-large-sidebar);
      }
    }
  }
}
