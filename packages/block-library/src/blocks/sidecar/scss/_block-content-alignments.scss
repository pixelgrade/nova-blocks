// ALIGNMENTS
// There are four types of alignments available,
// besides the classic left, right and center.
// 1) Alignfull - This align will help element to break
// out of the container, and make it full screen.
// 2) Alignwide - This align will help element to break
// out of container, to be slightly bigger than content,
// based on your settings.
// 3) Alignright & Pull Right - This align will pull element outside
// of the content on the right side.
// 4) Alignleft & Pull Left - This align will pull element outside
// of the content on the left side.

// Full
// It will span from
// [fs] column to [fe] column.
.alignfull,
[data-align='full']{
  --block-content-start: fs;
  --block-content-end: fe;
}

// Wide
// It will span from
// [ws] column to [we] column.
.alignwide,
[data-align='wide'] {
  --block-content-start: ws;
  --block-content-end: we;
}

// Stop Right
// That means the block
// cannot span any columns
// on the right, so we are going to
// stop it at the [ce] column.
.stop-right,
.stop-right * {
  --block-content-end: ce;
}

// Stop Left
// That means the block
// cannot span any columns
// on the left, so we are going to
// stop it at the [cs] column.
.stop-left,
.stop-left * {
  --block-content-start: cs;
}

// Align Left & Pull Left
// Inside Sidecar they are treated the same.
// They will span on the left wide side,
// between [ws] column and [gs] column.
// However, if we do not have enough space on the left,
// we are going to consider
// user intention of pulling the block and pull
// the block on the right side.
//
// The same logic is applied for alignright and pull-right.
.alignleft,
.pull-left,
[data-novablocks-alignment='pull-left'] {
    
  --block-content-start: ws;
  --block-content-end: gs;

  &.stop-left {
  
    --block-content-start: ge;
    --block-content-end: we;
  
    + *:not([class*='align']) {
      --block-content-end: ce;
    }
  }
}

.alignright,
.pull-right,
[data-novablocks-alignment='pull-right'] {
  
  --block-content-start: ge;
  --block-content-end: we;

  &.stop-right {
    --block-content-start: ws;
    --block-content-end: gs;
  
    + *:not([class*='align']) {
      --block-content-start: cs;
    }
  }
}

// To avoid unneeded white space,
// aligned and pulled items will
// span on 3 rows.
.alignright,
.alignleft,
.pull-right,
.pull-left {
  grid-row-end: span 5;
}

// ALIGNMENTS

.novablocks-content {
  grid-column: var(--block-content-start)/var(--block-content-end);
  position: relative;
}

// RIGHT SIDEBAR
.novablocks-sidecar {
  
  .novablocks-content:not(:only-child) {
  
    .pull-left,
    .pull-right,
    .alignleft,
    .alignright {
      @include grid-item-position('right');
      
      &[class*='stop'] {
        --block-content-start: var(--block-limit-left);
        --block-content-end: ce;
  
        + *:not([class*='align']) {
          --block-content-start: var(--block-limit-left);
        }
      }
    }
  }
}

// LEFT SIDEBAR
.novablocks-sidecar--sidebar-left {
  
  .novablocks-content:not(:only-child)[class] {
  
    .pull-left,
    .pull-right,
    .alignleft,
    .alignright {
      @include grid-item-position('left');
  
      + *:not([class*='align']) {
        --block-content-end: var(--block-limit-right);
      }
      
      &[class*='stop'] {
        --block-content-start: cs;
        --block-content-end: var(--block-limit-right);
      }
    }
  }
}

// TWO SIDEBARS
.novablocks-sidecar--complex {
  
  .novablocks-content:not(:only-child)[class] {
  
    .pull-left {
  
      @include grid-item-position('left');
  
      // There is not space on the left side,
      // so we are going to treat pull left as pull right.
      &.stop-left {
        @include grid-item-position('right');
      }
    }
  
    .pull-right {
  
      @include grid-item-position('right');
    
      // There is not space on the left side,
      // so we are going to treat pull left as pull right.
      &.stop-right {
        @include grid-item-position('left');
      }
    }
    
    .alignleft {
  
      @include grid-item-position('left');
      
      &[class*='stop-left'] {
        @include grid-item-position('right');
      }
      
      &[class*='stop-right'] {
        @include grid-item-position('left');
      }
    }
    
    .alignright {
      
      &[class*='stop'] {
        @include grid-item-position('content-right');
    
        + *:not([class*='align']) {
          --block-content-end: gcs;
        }
      }
    }
    
    .alignleft,
    .alignright,
    .pull-left,
    .pull-right {
    
      + *:not([class*='align']) {
        
        --block-content-start: cs;
      }
    
    }
  
  }
}

// SIDECAR IN SIDECAR
.novablocks-sidecar:not(.ignore-block) {
  
  // Sidecar with Sidebar Left
  // inside Sidecar with Sidebar Right
  .novablocks-sidecar {
  
    .novablocks-content {
      
      @include grid-item-position('content');
      
      .pull-left {
        @include grid-item-position('left');
      }
      
      .pull-right {
        @include grid-item-position('right');
      }
  
      .alignleft {
        
        @include grid-item-position('left');
    
        &[class*='stop'] {
          @include grid-item-position('right');
        }
      }
  
      .alignright {
  
        @include grid-item-position('right');
    
        &[class*='stop'] {
          @include grid-item-position('left');
        }
      }
      
      //.alignleft,
      //.alignright,
      //.pull-left,
      //.pull-right {
      //
      //  + *:not([class*='align']) {
      //    --block-content-start: cs;
      //    --block-content-end: ce;
      //  }
      //}
    }
  }
  
  // Sidecar with Sidebar Right
  // inside Sidecar with Sidebar Left
  
  &.novablocks-sidecar--sidebar-left {
    
    .novablocks-sidecar {
  
      .novablocks-sidebar {
        
        grid-column: ge/var(--block-limit-right);
      }
    }
  }
}

.novablocks-content {
  
  // Usually we are using some padding left and right
  // to make sure that our site container is not
  // touching the margins of the browser.
  // Given the fact that we want full items to span on the entire screen,
  // we are going to apply negative margin to achieve that.
  .alignfull {
    margin-left: calc(-1 * var(--novablocks-container-spacings));
    margin-right: calc(-1 * var(--novablocks-container-spacings));
    
    @include above(lap) {
      &.stop-left {
        margin-left: 0;
      }
  
      &.stop-right {
        margin-right: 0;
      }
    }
  }
}


.novablocks-sidebar {
  
  // We do not need negative margins for
  // alignfull items inside the Sidebar.
  .alignfull {
    margin-left: 0;
    margin-right: 0;
  }
}

.novablocks-sidecar:not(.ignore-block) {
  
  .novablocks-collection {
    margin-left: 0;
    margin-right: 0;
  }
}
