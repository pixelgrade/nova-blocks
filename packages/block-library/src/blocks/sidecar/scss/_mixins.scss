// Default Layout Grid
// fs - full start
// ws - wide start
// cs - content start
// ce - content end
// cc - content center
// we - wide end
// fe - full end
// gs - gap start
// ge - gap end
// gcs - gap content start
// gce - gap content end
// [cs] [cc] column will be equal with minmax(22ch, var(--content-width-start)
// to make sure that we always have a minimum of characters displayed.
// The same thing applies for [cc] [ce].
// Doing that, in content will always be at least 44 characters.
@mixin layout-grid {
  display: var(--display-mode);
  flex-direction: column;
  
  grid-template-columns: [fs] 1fr [ws] var(--wds) [gs] var(--grid-gap-size) [cs] minmax(22ch, var(--content-width-start-max-value)) [gcs] calc(var(--grid-gap-size)/2) [cc] calc(var(--grid-gap-size)/2) [gce]  minmax(22ch, var(--content-width-end-max-value)) [ce] var(--grid-gap-size) [ge] var(--wde) [we] 1fr [fe];
  
  --wide-width: calc(var(--theme-content-width-wide));
  --content-width: var(--theme-content-width-normal);
  --content-width-start-max-value: calc((var(--content-width) - var(--minimum-sidebar-left-width))/2 - var(--grid-gap-size));
  --content-width-end-max-value:  calc((var(--content-width) - var(--minimum-sidebar-right-width))/2  - var(--grid-gap-size));
  --full: 100vw;
  --wide:  calc( min( var(--wide-width), var(--full) ) );
  --content: var(--content-width);
  --wd: calc( var(--wide) * 0.5 - var(--content) * 0.5 );
  --wds: minmax( var(--minimum-sidebar-left-width), var(--wd));
  --wde: minmax( var(--minimum-sidebar-right-width), var(--wd));
}

// Default Layout Settings
// --wide-width - Wide Blocks maximum width.
// This can also be considered as container width,
// because a layout block with sidebar will use this width.
// --content-width - Content column maximum width.
// --display-mode - Block default display mode. (eg. grid or flex)
// --grid-gap-size - Default gap between grid columns.
// --minimum-sidebar-*-width - Minimum sidebar Width for specific Sidebar.
// This minimum sidebar width is useful when user will display an ad inside
// the sidebar and want the sidebar to have a minimum size.
// --sticky-element-to-spacing - Used to position the sticky block.
// In Rosa2 this value will be equal with site header height, in this way,
// the sticky block will not be under the header.
// --content-width-*-max-value - Content column is separated in two columns (start and end),
// which will allow us to achieve layouts with a higher level of complexity.
// --all-columns - Used for blacks that need to span on the entire grid.
@mixin layout-settings {
  --default-width-small-sidebar: 230px;
  --default-width-large-sidebar: 300px;
  --sticky-element-top-spacing: 0px;
  --grid-gap-size: 30px;
  --minimum-sidebar-left-width: var(--default-width-small-sidebar);
  --minimum-sidebar-right-width: var(--default-width-small-sidebar);
  --display-mode: flex;
  --all-columns: fs/fe;
  
  // Default position for blocks is between cs and ce.
  --block-content-start: cs;
  --block-content-end: ce;
  
  // Default block limits are ws and we.
  --block-limit-left: ws;
  --block-limit-right: we;
  
  // Make it grid only above 1024px.
  @include above(lap) {
    --display-mode: grid;
  }
}

@mixin grid-border {
  
  position: relative;
  
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    width: calc(100% + 20px);
    height: 100%;
  
    margin-left: -10px;
    
    grid-column: var(--block-content-start)/var(--block-content-end);
    border: 2px dashed var(--novablocks-color-1);
  }
}

