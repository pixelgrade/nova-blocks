@import 'scss/mixins';
@import 'scss/block-content-alignments';
@import 'scss/utility';

// This is where magic starts.
.novablocks-sidecar,
.novablocks-content {
  position: relative;
  align-items: start;
  @include nb-content-layout-grid;
}

.novablocks-sidebar,
.novablocks-content {

  @include above(lap) {
    grid-row: 1;
  }
}

.novablocks-sidebar {
  height: 100%;
  z-index: 2;

  // Default sidebar position is on the right, so it will be positioned between [ge] and block-limit-right.
  @include above(lap) {
    grid-column: ge / var(--block-limit-right);
  }

  > * {
    z-index: 2;
  }

  // Below 1024px everything is shown on one column, so we need to add a margin top to the sidebar.
  @include below(lap) {
    // @todo maybe var(--element-spacing) is the proper gap to be used here
    margin-top: var(--nb-sidecar-grid-gap);
  }
}

// Apply top and bottom spacing
// on all blocks inside content
// and sidebar.
.novablocks-content,
.novablocks-sidebar {

  > * {
    @include block-spacing;
  }
}

.novablocks-content {
  order: -1; // content should always have priority and stay on top.

  --block-content-end: ce;
}

.novablocks-sidecar {

  &--sidebar-right {
    
    > .novablocks-content {
     
      > :not([class*='align']) {
        --block-content-start: var(--block-limit-left);
        --block-content-end: ce;
      }
    }
  }
  
  // Sidebar Left with Content on the Right.
  // Content will always start at CS and it
  // will end at layout block limit on the right. Limit on the right
  // is given by layout block alignment.
  // Sidebar will always start at block limit on
  // the left and will end at CS.
  &--sidebar-left {
    --block-content-start: cs;
    --block-content-end: var(--block-limit-right);
    
    .novablocks-sidebar {
      grid-column: var(--block-limit-left)/gs;
    }
  }
  
  // Sidebar Left with Content Centered and Sidebar Right.
  // Content will always start at CS and will end at CE.
  // Sidebar Left will start at block limit left and end at CS.
  // Sidebar Right will start at CE and will end at block limit on right.
  &--complex {
    
    .novablocks-content {
      --block-content-start: cs;
      --block-content-end: ce;
    }
    
    .novablocks-sidebar {
      grid-column: ws / gs;
    }
    
    .novablocks-sidebar:last-child {
      grid-column: ge / we;
    }
  }
}

// Make last block from Sidebar Sticky
.last-block-is-sticky {
  
  .novablocks-sidebar {
    
    >:last-child {
      position: sticky;
      top: var(--sticky-element-top-spacing, 0);
      margin-bottom: 1em;
      
      transition: var(--nb-transition);
      transition-property: opacity;

      @include above(lap) {

        &.novablocks-hidden-block {
          opacity: 0;
        }
      }
    }
  }
}


// Minimum Sidebar Width Logic

// Small Sidebar
.novablocks-sidebar--small {
  --nb-sidecar-sidebar-minimum-width:  var(--nb-sidecar-sidebar-small-width);
}

// Medium Sidebar
.novablocks-sidebar--medium {
  --nb-sidecar-sidebar-minimum-width:  var(--nb-sidecar-sidebar-medium-width);
}

// Large Sidebar
.novablocks-sidebar--large {
  --nb-sidecar-sidebar-minimum-width:  var(--nb-sidecar-sidebar-large-width);
}

.novablocks-sidecar--sidebar-left {
  
  .novablocks-content {

    > :not([class*='align'], [data-align]) {
      --block-content-end: var(--block-limit-right);
    }
  }
}

// Custom Offset Logic
// On blocks without sidebar, we want to
// adjust the offset based on user needs.
// Until 1800px, we will use the same logic as minimum sidebar,
// keeping the minimum width, and after
// that we will transform that width to em.
// By default --offset-addon will be equal to 230,
// but this value can be easily controlled using a Customizer control.

.novablocks-content:first-of-type:last-child {
  --nb-sidecar-sidebar-default-width: calc((var(--offset-addon) * 1px - var(--nb-sidecar-grid-gap)) * 0.5);
  --sidebar-variable-offset-value: calc( (var(--offset-addon)/ var(--body-font-size)) * 1em );
  
  @include above(ultra) {
    --nb-sidecar-sidebar-default-width: calc( (var(--sidebar-variable-offset-value) - var(--nb-sidecar-grid-gap)) * 0.5);
  }
}

.novablocks-collection {
  
  // We do not want to alter font size modifier
  // inside Nova Blocks Collections
  .wp-block-group__inner-container[class] {
    --font-size-modifier: 1;
  }
}

.novablocks-sidecar__container {
  @include block-spacing-reset;
  @include block-spacing-top-level-multiplier;
  @include block-spacing-nested-levels-multiplier;
}
