@import 'scss/mixins';
@import 'scss/block-limits';
@import 'scss/block-content-alignments';
@import 'scss/utility';

:root {
  @include layout-settings;
}

.novablocks-sidecar {
  position: relative;
  @include layout-grid;
  align-items: start;
}

.novablocks-sidecar {
  
  > * {
    grid-row: 1;
  }
  
  // Sidebar Right with Content on the Right Layout.
  // Content will always start at layout block limit on the left and
  // will end at CE. Limit on the left
  // is given by layout block alignment.
  // Sidebar will always start at CE and will end
  // at block limit on the right.
  --block-content-end: ce;
  
  // Sidebar Left with Content on the Right Layout.
  // Content will always start at CS and it
  // will end at layout block limit on the right. Limit on the right
  // is given by layout block alignment.
  // Sidebar will always start at block limit on
  // the left and will end at CS.
  &--sidebar-left {
    --block-content-start: cs;
    --block-content-end: var(--block-limit-right);
    
    .novablocks-sidebar {
      grid-column: var(--block-limit-left)/gs;
    }
  }
  
  
  // Sidebar Left with Content Centered and Sidebar Right Layout.
  // Content will always start at CS and will end at CE.
  // Sidebar Left will start at block limit left and end at CS.
  // Sidebar Right will start at CE and will end at block limit on right.
  &--complex {
    
    .novablocks-content {
      --block-content-start: cs;
      --block-content-end: ce;
    }
    
    .novablocks-sidebar {
      grid-column: var(--block-limit-left)/gs;
    }
    
    .novablocks-sidebar:last-child {
      grid-column: ge/var(--block-limit-right);
    }
  }
}
// Default sidebar position is on the right,
// so it will be positioned between [ge] and block-limit-right.
.novablocks-sidebar {
  grid-column: ge/var(--block-limit-right);
  
  height: 100%;
}

// Apply top and bottom spacing
// on all blocks inside content
// and sidebar.
.novablocks-content,
.novablocks-sidebar {
  
  > * {
    @include block-spacing;
  }
}


// When grid is not used (eg. under 1024px),
// we are using flex with direction column.
.novablocks-content,
.novablocks-sidecar {
  flex-direction: column;
}

// Content should always have priority
// and stay on top.
.novablocks-content {
  order: -1;
}

// Make last block from Sidebar Sticky
.last-block-is-sticky {
  
  .novablocks-sidebar {
    
    >:last-child {
      position: sticky;
      top: var(--sticky-element-top-spacing);
      margin-bottom: 1em;
    }
  }
}


// Minimum Sidebar Width Logic
// At first, we will change the sidebar minimum width
// for the layout block, and if we have a nested layout block,
// we will change minimum sidebar width for that block too.
// Doing that, we will make sure that both blocks are sharing the same grid
// and alignments are working properly.
.novablocks-sidebar--large {
    
  &:not(.novablocks-sidecar--sidebar-left),
  .novablocks-sidecar,
  .wp-block-group__inner-container {
    --minimum-sidebar-right-width: var(--default-width-large-sidebar);
  }
  
  &.novablocks-sidecar--sidebar-left {
    
    &,
    .novablocks-sidecar,
    .wp-block-group__inner-container {
      --minimum-sidebar-left-width: var(--default-width-large-sidebar);
    }
  }
}

.wp-block-group__inner-container {
  @include layout-grid;
  
  > * {
    grid-column: var(--block-content-start)/var(--block-limit-right);
  }
}

.novablocks-sidebar,
.wp-block-group {
  
  .wp-block-group__inner-container {
    --display-mode: block;
  }
}

.novablocks-sidebar--large {
  --sidebar-excess-width: calc((var(--wd) * 0.3) * 0.5);
}

.novablocks-sidecar {
  
  &.novablocks-sidebar--large,
  .wp-block-group__inner-container {
    
    &,
    .novablocks-sidecar {
      --sidebar-right-size-modifier: 1.3;
    }
  }
}

.novablocks-sidecar:not(.ignore-block) {
  
  &:not(.novablocks-sidecar--sidebar-left) {
  
    &.novablocks-sidebar--large {
      --sidebar-right-size-modifier: 1.3;
    }
  }
  
  &.novablocks-sidecar--sidebar-left {
  
    &.novablocks-sidebar--large {
      --sidebar-left-size-modifier: 1.3;
    }
  }
}

@include above(lap) {
  .novablocks-content[class] {
    
    .alignleft {
      --pull-left-value: calc((max(var(--wd), var(--minimum-sidebar-left-width))) * 0.5 + var(--grid-gap));
    }
    
    .alignright {
      --pull-right-value: calc((max(var(--wd), var(--minimum-sidebar-left-width))) * 0.5 + var(--grid-gap));
    }
    
    .alignleft {
      margin-left: calc(-1 * var(--pull-left-value, 0px));
    }
    
    .alignright {
      margin-right: calc(-1 * var(--pull-right-value, 0px));
    }
  }
}

.novablocks-sidebar--large {
  --grid-sidebar-width: var(--default-width-large-sidebar);
}
