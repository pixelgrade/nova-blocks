@import 'scss/mixins';
@import 'scss/block-content-alignments';
@import 'scss/utility';

:root {
  @include layout-settings;
}

// This is where magic starts.
.novablocks-sidecar,
.novablocks-content {
  position: relative;
  @include layout-grid;
  align-items: start;
}

// Under 1024px everything is shown
// on one column, so we need to add
// a margin top to the sidebar.
.novablocks-sidebar {
  
  z-index: 2;
  
  @include below(lap) {
    margin-top: var(--grid-gap);
  }
}

.novablocks-content {
  grid-column: var(--all-columns);
  --block-content-end: ce;
  
  // Collections are coming with .alignfull,
  // to help us with background-color.
  // Nested in Collection Block is an inner-container
  // which will be treated as a grid too.
  > .novablocks-collection {
    grid-column: var(--all-columns);
  }
}

.novablocks-sidecar {
  
  grid-column: var(--all-columns) !important;
  
  > * {
    grid-row: 1;
  }
  
  &--sidebar-right {
    
    > .novablocks-content {
     
      > *:not([class*='align']) {
        --block-content-start: var(--block-limit-left);
        --block-content-end: ce;
      }
    }
    
  }
  
  // Sidebar Left with Content on the Right.
  // Content will always start at CS and it
  // will end at layout block limit on the right. Limit on the right
  // is given by layout block alignment.
  // Sidebar will always start at block limit on
  // the left and will end at CS.
  &--sidebar-left {
    --block-content-start: cs;
    --block-content-end: var(--block-limit-right);
    
    .novablocks-sidebar {
      grid-column: var(--block-limit-left)/gs;
    }
  }
  
  // Sidebar Left with Content Centered and Sidebar Right.
  // Content will always start at CS and will end at CE.
  // Sidebar Left will start at block limit left and end at CS.
  // Sidebar Right will start at CE and will end at block limit on right.
  &--complex {
    
    .novablocks-content {
      --block-content-start: cs;
      --block-content-end: ce;
    }
    
    .novablocks-sidebar {
      grid-column: ws/gs;
    }
    
    .novablocks-sidebar:last-child {
      grid-column: ge/we;
    }
  }
}
// Default sidebar position is on the right,
// so it will be positioned between [ge] and block-limit-right.
.novablocks-sidebar {
  grid-column: ge/var(--block-limit-right);
  height: 100%;
  
  > * {
    z-index: 2;
  }
}

// Apply top and bottom spacing
// on all blocks inside content
// and sidebar.
.novablocks-content,
.novablocks-sidebar {
  
  > * {
    @include block-spacing;
  }
}

// When grid is not used (eg. under 1024px),
// we are using flex with direction column.
.novablocks-content,
.novablocks-sidecar {
  flex-direction: column;
}

// Content should always have priority
// and stay on top.
.novablocks-content {
  order: -1;
}

// Make last block from Sidebar Sticky
.last-block-is-sticky {
  
  .novablocks-sidebar {
    
    >:last-child {
      position: sticky;
      top: var(--sticky-element-top-spacing);
      margin-bottom: 1em;
      
      transition: var(--nb-transition);
      transition-property: opacity;

      &.novablocks-hidden-block {
        opacity: 0;
      }
    }
  }
}


// Minimum Sidebar Width Logic

// Small Sidebar
.novablocks-sidebar--small {
  --minimum-sidebar-width:  var(--default-width-small-sidebar);
}

// Medium Sidebar
.novablocks-sidebar--medium {
  --minimum-sidebar-width:  var(--default-width-medium-sidebar);
}

// Large Sidebar
.novablocks-sidebar--large {
  --minimum-sidebar-width:  var(--default-width-large-sidebar);
}

// Applying Grid on Group Block
.wp-block-group__inner-container {
  @include layout-grid;
}


.novablocks-sidebar,
.wp-block-group {
  
  .wp-block-group__inner-container {
    --display-mode: block;
  }
}

.novablocks-sidecar--sidebar-left {
  
  .novablocks-content {

    > *:not([class*='align']):not([data-align]) {
      --block-content-end: var(--block-limit-right);
  
    }
    
  }
}

// Custom Offset Logic
// On blocks without sidebar, we want to
// adjust the offset based on user needs.
// Until 1800px, we will use the same logic as minimum sidebar,
// keeping the minimum width, and after
// that we will transform that width to em.
// By default --offset-addon will be equal to 230,
// but this value can be easily controlled using a Customizer control.

.novablocks-content:first-of-type:last-child {
  --default-width-offset-sidebar: calc((var(--offset-addon) * 1px - var(--grid-gap)) * 0.5);
  --sidebar-variable-offset-value: calc( (var(--offset-addon)/ var(--body-font-size)) * 1em );
  
  @include above(ultra) {
    --default-width-offset-sidebar: calc( (var(--sidebar-variable-offset-value) - var(--grid-gap)) * 0.5);
  }
}

.ignore-block {
  
  .novablocks-sidecar {
    --default-width-offset-sidebar: var(--default-sidebar-width);
  }
}

.novablocks-collection {
  
  // We do not want to alter font size modifier
  // inside Nova Blocks Collections
  .wp-block-group__inner-container[class] {
    --font-size-modifier: 1;
  }
}

.novablocks-sidecar__container {
  @include block-spacing-reset;
  @include block-spacing-top-level-multiplier;
  @include block-spacing-nested-levels-multiplier;
}
