/* ==========================================================================
   #LISTS
   ========================================================================== */

$checkbox-svg-path: '../../packages/icons/src/svgs/tick.svg';

@mixin list-padding-on-item {

  padding-left: 0;

  li {
    padding-left: var(--nb-list-spacing);

    &:before {
      left: var(--pull-value, var(--nb-list-bullet-border-width, 0px));
    }

    &:after {
      left: 0;
    }
  }
}

// List default settings
// --nb-timeline-weight: border weight used for Timeline connector.
// --divider-weight: border weight used for Divider horizontal separator.
// Usually used on border or box-shadow, depending on the situation.
// This will also help us to position correctly the
// :before element on <li> (usually bullet, or checkmark).
// --icon-width and --icon-height: width and height of the checkmarks.
// This will also help us to position correctly
// checkmark background, or timeline border.
.nb-list {

  --icon-width: 0.333em;
  --icon-height: var(--icon-width);


  &:not(.list-no-marker) {
    padding-left: var(--nb-list-spacing);
    margin-left: 0;
  }

  &, * {
    list-style: none;
  }
}




// Users can select between two options
// for list: ordered and unordered.
// For the ordered list, his intention is clear,
// he wants an ordered list, with numbers.
// For this selection, the user can control
// List Items Connection: None, Divider or Timeline.
// For unordered lists, his intention is not really clear,
// We know that he wants a list, but we are not sure
// that he wants bullets, icons, or maybe nothing,
// just a simple list.
// For this selection, user can control
// Marker Settings: None, Bullet or Checkmark.
// List Items Connection: None, Divider or Timeline.


.nb-list {

  // @at-root moves the block to the top-level. This has several uses,
  // but here it's being used to keep take advantage
  // of the & syntax without implying that the rules are child selectors of .semantic.
  // See: https://sass-lang.com/documentation/at-rules/at-root
  @at-root {

    // UL
    // We are resetting default styles,
    // and are using custom custom styling.
    // New bullets are created using :before and :after
    // pseudo-elements on list items.
    ul#{&} {
      --nb-list-bullet-border-width: 0.222em;

      li {
        position: relative;

        &:before {
          content: '';

          position: absolute;
          top: calc((var(--current-font-size) * var(--current-line-height) - var(--nb-list-bullet-size)) * 0.5);
          left: calc(-1 * var(--nb-list-spacing) + var(--nb-list-bullet-border-width));
          z-index: 10;

          width: var(--nb-list-bullet-size);
          height: var(--nb-list-bullet-size);

          background-color: var(--nb-list-bullet-color);
          border-radius: 50%;
          box-shadow: 0 0 0 var(--nb-list-bullet-border-width) var(--nb-list-bullet-bg-color), 0 0 0 var(--nb-list-bullet-outline) var(--nb-list-bullet-color);
        }
      }

      // When we are not using checkmarks,
      // bullet width and it's addons should be changed.
      &:not(.list-checkmark-style) {
        --nb-list-bullet-size: 0.333em;
        --nb-list-bullet-size: var(--nb-list-bullet-size);
        --nb-list-bullet-addon: calc(var(--nb-list-bullet-border-width) * 2);
      }

      // LIST STYLE - NONE
      &.list-no-marker {
        --nb-list-bullet-size: var(--divider-weight);
        --nb-list-bullet-addon: 0px;

        padding-left: 0;
        list-style: none;

        li {

          &:before {
            content: none;
          }
        }

        &.is-style-timeline {
          padding-left: var(--nb-list-spacing);
          box-shadow: inset var(--nb-timeline-weight) 0 0 var(--nb-list-connection-color);
        }
      }

      // LIST STYLE - CHECKMARK
      &.list-checkmark-style {

        &.sm-color-signal-0,
        &.sm-color-signal-1,
        &:not([class*='sm-color-signal']) {
          --nb-list-bullet-addon: calc(var(--nb-list-bullet-size) * -0.5);

          li {

            &:after {
              width: calc(var(--nb-list-bullet-size) * 0.5) !important;
              height: calc(var(--nb-list-bullet-size) * 0.5) !important;
            }
          }
        }

        &.is-style-timeline {
          --border-width: 0.11em;

          &:before {
            content: '';

            position: absolute;
            left: calc(var(--nb-list-bullet-size) * 0.25);

            width: var(--nb-timeline-weight);

            transform: translateX(-50%);
            background-color: var(--nb-list-connection-color);
          }

          &.sm-color-signal-2,
          &.sm-color-signal-3 {

            &:before {
              left: calc(var(--nb-list-bullet-size) * 0.5);
            }
          }
        }

        &.is-style-divider {

          &,
          &:not(.list-no-marker) {

            li {
              &:before {
                transform: translate(-50%, -50%);
              }
            }
          }
        }

        &,
        ul {
          --icons-background-width: calc(var(--nb-list-spacing) - 0.45em);
          --icons-background-height:  calc(var(--nb-list-spacing) - 0.45em);
        }

        &.sm-color-signal-0,
        &.sm-color-signal-1,
        &:not([class*='sm-color-signal']) {

          li {

            &:before {
              left: calc(-1 * var( --nb-list-spacing) );
              transform: translateY(-50%);
            }
          }
        }

        li {




        }
      }

      // LIST STYLE - BULLET
      &.list-bullet-style {

        &.is-style-timeline {
          position: relative;

          // We want to overwrite
          // default list styling, by using :before.
          list-style-type: none;
        }
      }
    }


  }

  // LIST STYLE - CHECKMARK
  &.list-checkmark-style {

    // Adjust checkmark size for uls
    // inside list with checkmark style.
    ul {
      --nb-list-bullet-size: calc(var(--current-font-size) * var(--current-line-height));
      --nb-list-bullet-addon: calc(var(--nb-list-bullet-size) * -0.5);
    }

    &.is-style-divider {

      &.sm-color-signal-0[class],
      &.sm-color-signal-1[class] {

        li {

          &:before {
            left: 0;
            transform: translateY(-50%);
          }
        }
      }
    }

  }

  // CONNECTION STYLE - DIVIDER
  &.is-style-divider {

    // Nothing to fancy for the divider,
    // just a border bottom.
    li {
      --element-spacing: var(--theme-spacing-fluid-smaller);

      &:not(:last-child) {
        border-bottom: var(--divider-weight) solid var(--nb-list-connection-color);
        padding-bottom: var(--element-spacing);
      }

      ul,
      ol {

        li {
          border-bottom: 0;
          padding-bottom: 0;
        }
      }
    }

    // We want our divider width to be given
    // by list width, not by list item text,
    // and because of that we are moving padding from list,
    // to list item.
    &.list-checkmark-style,
    &:not(.list-no-marker) {
      @include list-padding-on-item;
    }

  }

  // CONNECTION STYLE - TIMELINE
  &.is-style-timeline {

    position: relative;

    // We want to overwrite
    // default list styling, by using :before.
    list-style-type: none;

    &.list-checkmark-style li:last-child {
      box-shadow: var(--nb-bg-color) calc(-1 * var(--nb-list-spacing)) 0 0 0;
    }

    &:not(.list-checkmark-style) li:last-child {

      &:after {
        content: '';
        position: absolute;
        width: calc(var(--nb-timeline-weight) * 2);
        height: 100%;
        left: calc(-1 * (var(--nb-list-spacing) - var(--icon-width)));
        top: 0.55em;
        background-color: var(--nb-bg-color);
      }
    }

    &:before {
      content: '';
      position: absolute;
      top: calc(var(--current-line-height) * 0.5em);
      bottom: calc(var(--current-line-height) * 0.5em);
      left: calc(var(--icon-width) * 0.5 + var(--nb-list-bullet-border-width));
      transform: translateX(-50%);
      width: var(--nb-timeline-weight);
      background-color: var(--nb-list-connection-color);
      opacity: 0.2;
    }
  }

  // LIST STYLE - NO MARKER
  &.list-no-marker {

    &:before {
      content: none;
    }
  }
}
